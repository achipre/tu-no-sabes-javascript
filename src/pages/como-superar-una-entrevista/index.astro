---
import Layoutcracking from "../../layouts/Layoutcracking.astro"
---
<Layoutcracking title="Como superar una entrevista de codificación">
  <h1>Prólogo</h1>
  <article>
    <p>Estimado lector,</p>
    <p>
      Quitemos las presentaciones de en medio.
    </p>
    <p>
      No soy reclutador. Soy ingeniero de software. Y como tal, sé lo que es que te pidan que inventes algoritmos brillantes sobre la marcha y que escribas un código impecable en una pizarra. Lo sé porque me han pedido que haga lo mismo en entrevistas en Google, Microsoft, Apple y Amazon, entre otras empresas.
    </p>
    <p>
      También lo sé porque he estado al otro lado de la mesa, pidiendo a los candidatos que lo hicieran. He revisado montones de currículos para encontrar a los ingenieros que creía que podrían superar estas entrevistas. Los he evaluado mientras resolvían -o intentaban resolver- preguntas difíciles. Y he debatido en el Comité de Contratación de Google si un candidato lo había hecho lo suficientemente bien como para merecer una oferta. Entiendo el círculo completo de la contratación porque he pasado por todo ello, repetidamente.
    </p>
    <p>
      Y tú, lector, probablemente te estés preparando para una entrevista, quizá mañana, la semana que viene o el año que viene. Estoy aquí para ayudarte a consolidar tu comprensión de los fundamentos de la informática y, a continuación, aprender a aplicar esos fundamentos para superar la entrevista de codificación.
    </p>
    <p>
      La 6ª edición de Cracking the Coding Interview actualiza la 5ª edición con un 70% más de contenido: preguntas adicionales, soluciones revisadas, nuevas introducciones a los capítulos, más estrategias de algoritmos, pistas para todos los problemas y otros contenidos. No dejes de visitar nuestro sitio web, CrackingTheCodinglnterview.com, para ponerte en contacto con otros candidatos y descubrir nuevos recursos.
    </p>
    <p>
      Estoy entusiasmado por ti y por las habilidades que vas a desarrollar. Una preparación minuciosa te proporcionará una amplia gama de habilidades técnicas y de comunicación. Merecerá la pena, ¡no importa adónde te lleve el esfuerzo!
    </p>
    <p>
      Le animo a que lea detenidamente estos capítulos introductorios. Contienen información importante que puede marcar la diferencia entre "contratar" y "no contratar".
    </p>
    <p>
      <strong>
        Y recuerde: ¡las entrevistas son difíciles! 
      </strong>
      En mis años de entrevistas en Google, vi cómo algunos entrevistadores hacían preguntas "fáciles", mientras que otros hacían preguntas más difíciles. Pero, ¿sabe una cosa? Conseguir las preguntas fáciles no hace que sea más fácil conseguir la oferta. Recibir una oferta no consiste en resolver las preguntas de forma impecable (¡muy pocos candidatos lo hacen!). Se trata más bien de responder a las preguntas mejor que los demás candidatos. Así que no te estreses cuando te hagan una pregunta complicada: probablemente todos los demás también pensaron que era difícil. No pasa nada por no tener menos defectos.
    </p>
    <p>
      Estudia mucho, practica y ¡buena suerte!
    </p>
    <p>
      Gayle L. McDowell
    </p>
    <p>
      Founder/CEO, CareerCup.com
    </p>
    <p>
      Author of Cracking the PM Interview and Cracking the Tech Career
    </p>
  </article>
  <article>
    <p>
      <strong>
        Algo va mal
      </strong>
    </p>
    <p>
      Una vez más, salimos frustrados de la reunión de contratación. De los diez candidatos que examinamos ese día, ninguno recibiría una oferta. ¿Nos preguntábamos si habíamos sido demasiado duros?
    </p>
    <p>
      Yo, en particular, estaba decepcionado. Habíamos rechazado a uno de mis candidatos. Un antiguo alumno. Uno que yo había recomendado. Tenía un promedio de 3,73 en la Universidad de Washington, una de las mejores escuelas de informática del mundo, y había trabajado mucho en proyectos de código abierto. Era enérgico. Era creativo. Era listo. Trabajaba duro. Era un auténtico friki en todos los sentidos.
    </p>
    <p>
      Pero tenía que estar de acuerdo con el resto del comité: los datos no estaban ahí. Incluso si mi enfática recomendación podía hacer que lo reconsideraran, seguramente sería rechazado en las últimas fases del proceso de contratación. Había demasiadas señales de alarma.
    </p>
    <p>
      Aunque era bastante inteligente, le costaba resolver los problemas de la entrevista. La mayoría de los candidatos superaban con facilidad la primera pregunta, que era una vuelta de tuerca a un problema muy conocido, pero él tenía problemas para desarrollar un algoritmo. Cuando se le ocurrió uno, no tuvo en cuenta las soluciones que optimizaban otros escenarios. Por último, cuando se puso a programar, se le ocurrió una solución inicial, pero estaba plagada de errores que no supo detectar. Aunque no era el peor candidato que habíamos visto, distaba mucho de cumplir el "listón". Rechazado.
    </p>
    <p>
    Un par de semanas más tarde, cuando me pidió por teléfono que le diera mi opinión, no sabía qué decirle. ¿Que fuera más inteligente? No, sabía que era brillante. ¿Ser mejor programador? No, sus habilidades estaban a la altura de algunas de las mejores que había visto.
    </p>
    <p>
      Como muchos candidatos motivados, se había preparado mucho. Había leído el libro clásico de C de K&R y había repasado el famoso libro de texto de algoritmos de CLRS. Podía describir en detalle la miríada de formas de equilibrar un árbol, y podía hacer cosas en C que ningún programador en su sano juicio querría hacer jamás.
    </p>
    <p>
      Tuve que decirle la desafortunada verdad: esos libros no son suficientes. Los libros académicos te preparan para la investigación de lujo, y probablemente te harán un mejor ingeniero de software, pero no son suficientes para las inter vistas. ¿Por qué? Te daré una pista: tus entrevistadores tampoco han visto árboles rojinegros desde que iban al colegio.
    </p>
    <p>
      Para superar la entrevista de codificación, tienes que prepararte con preguntas reales. Debes practicar con problemas reales y aprender sus patrones. Se trata de desarrollar un algoritmo nuevo, no de memorizar problemas existentes.
      Mi enfoque
    </p>
    <p>
      <strong class="italic">Cracking the Coding Interview</strong> es el resultado de mi experiencia de primera mano entrevistando en las mejores empresas y más tarde asesorando a los candidatos a través de estas entrevistas. Es el resultado de cientos de conversaciones con candidatos. Es el resultado de miles de preguntas aportadas por candidatos y entrevistadores. Y es el resultado de ver tantas preguntas de entrevista de tantas empresas. En este libro se incluyen 189 de las mejores preguntas de entrevista, seleccionadas entre miles de problemas potenciales.
    </p>
  </article>
  <article>
    <p><strong>Mi enfoque</strong></p>
    <p>
      <strong class="italic">Cracking the Coding Interview</strong> se centra en preguntas sobre algoritmos, codificación y diseño. ¿Por qué? Porque aunque se le pueden hacer y se le harán preguntas de comportamiento, las respuestas serán tan variadas como su currículum. Del mismo modo, aunque muchas empresas le harán las llamadas preguntas "triviales" (por ejemplo, "¿Qué es una función virtual?"), las habilidades desarrolladas mediante la práctica de estas preguntas se limitan a conocimientos muy específicos. El libro abordará brevemente algunas de estas preguntas para mostrarle cómo son, pero he optado por dedicar espacio a áreas en las que hay más que aprender.
    </p>
  </article>
  <article>
    <p>
      <strong>
        Mi pasión
      </strong>
    </p>
    <p>
      Enseñar es mi pasión. Me encanta ayudar a la gente a entender nuevos conceptos y darles herramientas que les ayuden a sobresalir en lo que les apasiona.
    </p>
    <p>
      Mi primera experiencia oficial en la docencia fue en la Universidad de Pensilvania, cuando me convertí en ayudante de un curso de informática durante mi segundo año. Luego fui asistente de varios cursos más y, finalmente, puse en marcha mi propio curso de informática, centrado en las habilidades prácticas.
    </p>
    <p>
      Como ingeniero en Google, formar y orientar a nuevos ingenieros era una de las cosas que más me gustaban. Incluso utilicé mi "20% de tiempo" para impartir dos cursos de informática en la Universidad de Washington.
    </p>
    <p>
      Ahora, años después, sigo enseñando conceptos de informática, pero esta vez con el objetivo de preparar a los ingenieros de las startups para sus entrevistas de adquisición. He visto sus errores y dificultades, y he desarrollado técnicas y estrategias para ayudarles a combatir esos mismos problemas.
    </p>
    <p>
      <strong class="italic">Cracking the Coding Interview</strong>,
      <strong class="italic">Cracking the PM Interview</strong>,
      <strong class="italic">Cracking the Tech Career</strong> y 
      <strong class="italic">CareerCup</strong> reflejan mi pasión por la enseñanza. Incluso ahora, puedes encontrarme a menudo "pasando el rato" en CareerCup.com, ayudando a los usuarios que pasan por allí en busca de ayuda.
    </p>
    <p>
      Únete a nosotros.
    </p>
    <p>
      Gayle L. McDowell
    </p>
  </article>
  <footer class="flex justify-end">
    <a class="font-khand font-bold text-3xl py-4 sm:py-8 md:py-12 sm:text-4xl md:text-5xl" href="como-superar-una-entrevista/parte-1">
      <div class="transition-all text-nowrap relative ease-linear duration-500 w-28 sm:w-40 md:w-52
      hover:w-36 sm:hover:w-48 md:hover:w-56  hover:text-sky-500
      after:content-['↦'] after:text-red-500 after:transition-all after:ease-linear after:duration-500 after:opacity-0 after:relative after:-left-3 
      hover:after:content-['↦'] hover:after:transition-all hover:after:ease-linear hover:after:duration-500 hover:after:opacity-100 hover:after:left-3">Parte I</div>
    </a>
  </footer>
</Layoutcracking>