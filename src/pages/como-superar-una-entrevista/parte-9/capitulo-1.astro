---
import Layoutcracking from "../../../layouts/Layoutcracking.astro"
---
<Layoutcracking title="Como superar una entrevista de codificación">
  <h1>Capitulo 1</h1>
  <h2>Arrays y Strings</h2>
  <article>
    <p>
      Esperemos que todos los lectores de este libro estén familiarizados con los arrays y las cadenas, por lo que no les aburriremos con estos detalles. En su lugar, nos centraremos en algunas de las técnicas y problemas más comunes con estas estructuras de datos.
    </p>
    <p>
      Tenga en cuenta que las preguntas sobre arrays y las preguntas sobre cadenas suelen ser intercambiables. Es decir, una pregunta que este libro plantea utilizando un array puede plantearse en su lugar como una pregunta de cadena, y viceversa.
    </p>
  </article>
  <article>
    <h3>► Tablas hash</h3>
    <p>
      Una tabla hash es una estructura de datos que asigna claves a valores para una búsqueda altamente eficiente. Existen varias formas de implementarla. Aquí describiremos una implementación simple pero común.
    </p>
    <p>
      En esta implementación sencilla, utilizamos una matriz de listas enlazadas y una función de código hash. Para insertar una clave (que puede ser una cadena o cualquier otro tipo de dato) y un valor, hacemos lo siguiente:
    </p>
    <ol>
      <li>
        Primero, calculamos el código hash de la clave, que normalmente será un <code>int</code> o un <code>long</code> . Tenga en cuenta que dos claves diferentes pueden tener el mismo código hash, ya que puede haber un número infinito de claves y un número finito de enteros.
      </li>
      <li>
        A continuación, asigna el código hash a un índice del array. Esto podría hacerse con algo como <code>hash(key) % longitud_array</code>. Dos códigos hash diferentes podrían, por supuesto, asignarse al mismo índice.
      </li>
      <li>
        En este índice hay una lista enlazada de claves y valores. Almacena la clave y el valor en este índice. Debemos utilizar una lista enlazada debido a las colisiones: podrías tener dos claves diferentes con el mismo código hash, o dos códigos hash diferentes que se asignan al mismo índice.
      </li>
    </ol>
    <p>
      Para recuperar el par de valores por su clave, repite este proceso. Calcula el código hash a partir de la clave y, a continuación, calcula el índice a partir del código hash. A continuación, busque en la lista enlazada el valor con esta clave.
    </p>
    <p>
      Si el número de colisiones es muy alto, el tiempo de ejecución en el peor de los casos es <code>O(N)</code>, donde <code>N</code> es el número de claves. Sin embargo, generalmente asumimos una buena implementación que mantiene las colisiones al mínimo, en cuyo caso el tiempo de búsqueda es <code>O(1)</code>.
    </p>
    <div class="flex h-72">
      <pre class="relative">
        <code class="px-2">
          "hi"
          "abc"

          "aa"
          "qs"

          "pl"
        </code>
      </pre>
      <pre class="relative">
        <code>
          10320
          980

          897
          897

          63
        </code>
        <div class="absolute top-7 left-2 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-12 left-2 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-[118px] -left-2 flex items-center">
          <div class="mt-1 w-28 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-[136px] -left-2 flex items-center">
          <div class="mt-1 w-28 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-48 -left-2 flex items-center">
          <div class="mt-1 w-28 h-1 bg-black"></div><span>►</span>
        </div>
      </pre>
      
      <pre class="relative">
        <code>
          <span class="p-4 py-2 inline-block border-black border-2">0</span>
          <span class="p-4 py-2 inline-block border-black border-2">1</span>
          <span class="p-4 py-2 inline-block border-black border-2">2</span>
          <span class="p-4 py-2 inline-block border-black border-2">3</span>
          <span class="p-4 py-2 inline-block border-black border-2">4</span>
        </code>
        <div class="absolute top-7 left-2 rotate-6 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-12 left-2 -rotate-6 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-[118px] -left-2 rotate-6 flex items-center">
          <div class="mt-1 w-28 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-[136px] -left-2 rotate-3 flex items-center">
          <div class="mt-1 w-28 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-[182px] -rotate-6 -left-6 flex items-center">
          <div class="mt-1 w-32 h-1 bg-black"></div><span>►</span>
        </div>
      </pre>
      <pre class="relative">
        <code>
          <span class="p-4 py-2 inline-block border-black border-2">hi</span>
          <span class="p-4 py-2 inline-block border-black border-2">aa</span>
          

          <span class="p-4 py-2 -mt-4 inline-block border-black border-2">pl</span>
        </code>
        <div class="absolute top-8 left-2 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-20 left-2 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-44 left-2 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
      </pre>
      <pre class="relative">
        <code>
          <span class="p-4 py-2 inline-block border-black border-2">abc</span>
          


          <span class="p-4 py-2 inline-block border-black border-2">qs</span>
        </code>
        <div class="absolute top-8 left-2 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
        <div class="absolute top-44 left-2 flex items-center">
          <div class="mt-1 w-24 h-1 bg-black"></div><span>►</span>
        </div>
      </pre>
    </div>
    <p>
      Como alternativa, podemos implementar la tabla hash con un árbol de búsqueda binario equilibrado. Esto nos da un tiempo de búsqueda <code>O(log N)</code>. La ventaja de esto es que potencialmente se utiliza menos espacio, ya que no se asigna una gran matriz. También podemos iterar a través de las claves en orden, lo que puede ser útil a veces.
    </p>
  </article>
  <article>
    <h3>► ArrayList & Arrays Redimensionables</h3>
    <p>
      En algunos lenguajes, los arrays (a menudo llamados listas en este caso) son automáticamente redimensionables. El array o lista crecerá a medida que añadas elementos. En otros lenguajes, como Java, las matrices son de longitud fija. El tamaño se define al crear la matriz.
    </p>
    <p>
      Cuando necesites una estructura de datos tipo array que ofrezca un redimensionamiento dinámico, normalmente utilizarás un ArrayList. Un ArrayList es un array que se redimensiona a sí mismo según sea necesario mientras sigue proporcionando acceso <code>O(1)</code>. Una implementación típica es que cuando la matriz está llena, se duplica en tamaño. Cada duplicación requiere un tiempo de <code>O(n)</code>, pero ocurre tan raramente que su tiempo de inserción amortizado sigue siendo <code>O(1)</code>.
    </p>
    <pre>
      <code class="language-js">
        ArrayList&#60String> merge(String[] words, String[] more) &#123
          ArrayList&#60String> sentence = new ArrayList&#60String>();
          for (String w : words) sentence.add(w);
          for (String w : more) sentence.add(w); 
          return sentence;
        }
      </code>
    </pre>
    <p>
      Se trata de una estructura de datos esencial para las entrevistas. Asegúrate de que te sientes cómodo con las listas/arreglos redimensionables dinámicamente en cualquier lenguaje con el que vayas a trabajar. Tenga en cuenta que el nombre de la estructura de datos, así como el «factor de redimensionamiento» (que es 2 en Java) pueden variar.
    </p>
    <p><em>¿Por qué el tiempo de ejecución de inserción amortizado es 0(1)?</em>
    </p>
    <p>
      Supongamos que tenemos un array de tamaño <code>N</code>. Podemos trabajar hacia atrás para calcular cuántos elementos copiamos en cada incremento de capacidad. Observa que cuando aumentamos la matriz a K elementos, la matriz tenía antes la mitad de ese tamaño. Por lo tanto, necesitamos copiar <code><sup>K</sup>&frasl;<sub>2</sub></code> elementos.
    </p>
    <pre>
      <code>
        final capacity increase     : n/2 elements to copy
        previous capacity increase  : n/4 elements to copy
        previous capacity increase  : n/8 elements to copy
        previous capacity increase  : n/16 elements to copy
        ...
        second capacity increase    : 2 elements to copy
        first capacity increase     : 1 element to copy
      </code>
    </pre>
    <p>
      Por lo tanto, el número total de copias para insertar N elementos es aproximadamente <code> <sup>N</sup>&frasl;<sub>2</sub> + <sup>N</sup>&frasl;<sub>4</sub> + <sup>N</sup>&frasl;<sub>8</sub> + ... + 2 + 1</code> , que es justo menos que <code>N</code>.
    </p>
    <p class="pl-4 sm:pl-6 md:pl-8 border-l-2 sm:border-l-4 md:border-l-8 border-black">
      Si la suma de esta serie no te resulta obvia, imagina lo siguiente: Supongamos que tienes que caminar un kilómetro hasta la tienda. Caminas 0,5 kilómetros, y luego 0,25 kilómetros, y luego 0,125 kilómetros, y así sucesivamente. Nunca superará el kilómetro (aunque se acercará mucho).
    </p>
    <p>
      Por lo tanto, insertar N elementos lleva <code>O(N)</code> trabajo en total. Cada inserción es <code>O(1)</code> de media, aunque algunas inserciones lleven <code>O(N)</code> de tiempo en el peor de los casos.
    </p>
  </article>
  <article>
    <h3>► StringBuilder</h3>
    <p>
      Imagina que concatenas una lista de cadenas, como se muestra a continuación. ¿Cuál sería el tiempo de ejecución de este código? Para simplificar, supongamos que todas las cadenas tienen la misma longitud (llamémosle x) y que hay n cadenas.
    </p>
    <pre>
      <code class="language-js">
        String joinWords(String[] words) &#123
          String sentence = "";
          for (String w: words) &#123
            sentence = sentence + w;
          }
          return sentence;
        }
      </code>
    </pre>
    <p>
      En cada concatenación, se crea una nueva copia de la cadena y se copian las dos cadenas, carácter por carácter. La primera iteración requiere copiar <code>x</code> caracteres. La segunda iteración requiere copiar <code>2x</code> caracteres. La tercera iteración requiere <code>3x</code>, y así sucesivamente. Por tanto, el tiempo total es <code>O(x + 2x + ... + nx)</code>. Esto se reduce a <code>O(xn<sup>2</sup>)</code>.
    </p>
    <p class="pl-4 sm:pl-6 md:pl-8 border-l-2 sm:border-l-4 md:border-l-8 border-black">
      ¿Por qué es <code>O(xn<sup>2</sup>)</code>? Porque <code>1 + 2 + ... + n</code> es igual a <code> n(n+1)/2</code>, o <code>O(n<sup>2</sup>)</code>.
    </p>
    <p>
      StringBuilder puede ayudarle a evitar este problema. StringBuilder simplemente crea una matriz redimensionable de todas las cadenas, copiándolas de nuevo a una cadena sólo cuando es necesario.
    </p>
    <pre>
      <code class="language-js">
        String joinWords(String[] words) &#123
          StringBuilder sentence new StringBuilder();
          for (String w : words) &#123
            sentence.append(w);
          }
          return sentence.toString();
        }
      </code>
    </pre>
    <p>
      Un buen ejercicio para practicar cadenas, arrays y estructuras de datos generales es implementar tu propia versión de <code>StringBuilder</code>, <code>HashTable</code> y <code>ArrayList</code>.
    </p>
    <p><strong>Lecturas adicionales:</strong>
      Hash Table Collision Resolution (pg 636), Rabin-Karp Substring Search (pg 636). 
    </p>
  </article>
  <article>
    <h3 class="border-y-2 border-black">Preguntas de la entrevista</h3>
    <ul>
      <li class="list-none">
        <strong>1.1 Es Único:</strong>
        Implementar un algoritmo para determinar si una cadena tiene todos los caracteres únicos. ¿Qué pasa si no puedes utilizar estructuras de datos adicionales?
        <p><em>Pistas: #44, #7 7 7, #732</em>
        </p>
      </li>
      <li class="list-none">
        <strong>1.2 Comprobar Permutación:</strong>
        Comprobar Permutación: Dadas dos cadenas, escribe un método para decidir si una es una permutación de la otra.
        <p><em>Pistas: #7, #84, #722, #737</em>
        </p>
      </li>
      <li class="list-none">
        <strong>1.3 URLify:</strong>
        Escribe un método que sustituya todos los espacios de una cadena por '%20'. Puede asumir que la cadena tiene suficiente espacio al final para contener los caracteres adicionales, y que se le da la longitud «verdadera» de la cadena. (Nota: Si implementa en Java, utilice una matriz de caracteres para poder realizar esta operación en su lugar).
        <p>EJEMPLO</p>
        <pre>
          <code>
            Input:    "Mr John Smith     ", 13
            Output:   "Mr%20John%20Smith"
          </code>
        </pre>
        <p>
          <code></code>
        </p>
        <p><em>Pistas: #53, #118</em></p>
      </li>
      <li class="list-none">
        <strong>1.4 Permutación de palíndromos:</strong>
        Dada una cadena, escriba una función para comprobar si es una permutación de un palíndromo. Un palíndromo es una palabra o frase que es la misma hacia delante y hacia atrás. Una permutación es una reordenación de letras. El palíndromo no tiene por qué limitarse a las palabras del diccionario.
        <p>EJEMPLO</p>
        <pre>
          <code>
            Input:  Tact Coa
            Output: True (permutations: "taco cat", "atco eta", etc.)
          </code>
        </pre>
        <p><em>Pistas: #106, #121, #134, #136</em></p>
        </p>
      </li>
      <li class="list-none">
        <strong>1.5 Una edición:</strong>
        Hay tres tipos de ediciones que se pueden realizar en las cadenas: insertar un carácter, eliminar un carácter o reemplazar un carácter. Dadas dos cadenas, escriba una función para comprobar si están a una edición (o cero ediciones) de distancia.
        <p>EJEMPLO</p>
        <pre>
          <code>
            pale, ple -> true 
            pales, pale -> true 
            pale, bale -> true 
            pale, bake -> false
          </code>
        </pre>
        <p><em>Pistas: #23, #97, #130</em>
        </p>
      </li>
      <li class="list-none">
        <strong>1.6 Compresión de cadenas:</strong>
        Implementar un método para realizar la compresión básica de cadenas utilizando los recuentos de caracteres repetidos. Por ejemplo, la cadena <code>aabcccccaaa</code> se convertiría en <code>a2blc5a3</code>. Si la cadena «comprimida» no es más pequeña que la cadena original, el método debe devolver la cadena original. Puede suponer que la cadena sólo tiene letras mayúsculas y minúsculas (<code>a - z</code>).
        <p><em>Sugerencias:#92, #110</em>
        </p>
      </li>
      <li class="list-none">
        <strong>1.7 Rotar Matriz:</strong>
        Dada una imagen representada por una matriz <code>NxN</code>, donde cada píxel de la imagen tiene 4 bytes, escribe un método para rotar la imagen 90 grados. ¿Puedes hacerlo in situ?
        <p><em>Pistas:#51, #100</em>
        </p>
      </li>
      <li class="list-none">
        <strong>1.8 Matriz Cero:</strong>
        Escribe un algoritmo tal que si un elemento de una matriz <code>MxN</code> es 0, toda su fila y columna se pongan a <code>0</code>.
        <p><em>Pistas:#17, #74, #102</em>
        </p>
      </li>
      <li class="list-none">
        <strong>1.9 Rotación de Cadenas:</strong>
        Suponga que tiene un método <code>isSubstring</code> que comprueba si una palabra es una subsecuencia de otra. Dadas dos cadenas, sl y s2, escribe el código para comprobar si s2 es una rotación de sl usando sólo una llamada a <code>isSubstring</code> (por ejemplo, "<code>waterbottle</code>" es una rotación de "<code>erbottlewat</code>").
        <p><em>Pistas: #34, #88, #104</em>
        </p>
      </li>
    </ul>
    <p>
      Preguntas adicionales: Diseño orientado a objetos (#7.12). Recursión (#8.3), Ordenación y búsqueda (#10.9), C++
      (#12.11), Problemas moderados (#16.8, #16.17, #16.22), Problemas difíciles (#17.4, #17.7, #17.13, #17.22, #17.26).
    </p>
    <p>
      Las pistas comienzan en la página 653.
    </p>
  </article>
  <footer class="flex justify-end">
    <a class="font-khand font-bold text-3xl py-4 sm:py-8 md:py-12 sm:text-4xl md:text-5xl" href="capitulo-2">
      <div class="transition-all text-nowrap relative ease-linear duration-500 w-28 sm:w-40 md:w-52
      hover:w-36 sm:hover:w-48 md:hover:w-56  hover:text-sky-500
      after:content-['↦'] after:text-red-500 after:transition-all after:ease-linear after:duration-500 after:opacity-0 after:relative after:-left-3 
      hover:after:content-['↦'] hover:after:transition-all hover:after:ease-linear hover:after:duration-500 hover:after:opacity-100 hover:after:left-3"> Capitulo 2</div>
    </a>
  </footer>
</Layoutcracking>