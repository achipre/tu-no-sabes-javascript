---
import Layoutcracking from "../../../layouts/Layoutcracking.astro"
---
<Layoutcracking title="Como superar una entrevista de codificación">
  <h1>Capitulo 4</h1>
  <h2>Árboles y grafos</h2>
  <article>
    <p>
      Muchos entrevistados consideran que los problemas de árboles y grafos son algunos de los más complicados. Buscar en un árbol es más complicado que hacerlo en una estructura de datos organizada linealmente, como una matriz o una lista enlazada. Además, el tiempo en el peor de los casos y en el caso medio puede variar enormemente, por lo que debemos evaluar ambos aspectos de cualquier algoritmo. La fluidez a la hora de implementar un árbol o un grafo desde cero resultará esencial.
    </p>
    <p>
      Como la mayoría de la gente está más familiarizada con los árboles que con los grafos (y son un poco más sencillos), hablaremos primero de los árboles. Esto es un poco fuera de orden, sin embargo, como un árbol es en realidad un tipo de gráfico.
    </p>
    <p class="pl-4 sm:pl-6 md:pl-8 border-l-2 sm:border-l-4 md:border-l-8 border-black">
      Nota: Algunos de los términos de este capítulo pueden variar ligeramente según los libros de texto y otras fuentes. Si estás acostumbrado a una definición diferente, no pasa nada. Asegúrate de aclarar cualquier ambigüedad con tu entrevistador.
    </p>
  </article>
  <article>
    <h3>► Tipos de árboles</h3>
    <p>
      Una buena forma de entender un árbol es mediante una explicación recursiva. Un árbol es una estructura de datos compuesta por nodos.
    </p>
    <ul>
      <li>
        Cada árbol tiene un nodo raíz. (En realidad, esto no es estrictamente necesario en teoría de grafos, pero suele ser la forma en que utilizamos los árboles en programación, y especialmente en las entrevistas de programación).
      </li>
      <li>
        El nodo raíz tiene cero o más nodos hijos.
      </li>
      <li>
        Cada nodo hijo tiene cero o más nodos hijos, y así sucesivamente.
      </li>
    </ul>
    <p>
      El árbol no puede contener ciclos. Los nodos pueden o no estar en un orden particular, pueden tener cualquier tipo de datos como valores, y pueden o no tener enlaces a sus nodos padres.
    </p>
    <p>
      Una definición de clase muy simple para Node es:
    </p>
    <pre>
      <code class="language-js">
        class Node &#123
          public String name;
          public Node[] children:
        }
      </code>
    </pre>
    <p>
      También puede tener una clase Árbol para envolver este nodo. Para las preguntas de la entrevista, normalmente no utilizamos una clase Árbol. Puedes hacerlo si crees que simplifica o mejora tu código, pero rara vez es así.
    </p>
    <pre>
      <code class="language-js">
        class Tree &#123
          public Node root;
        }
      </code>
    </pre>
    <p>
      En las preguntas sobre árboles y gráficos abundan los detalles ambiguos y las suposiciones incorrectas. Tenga cuidado las siguientes cuestiones y busque aclaraciones cuando sea necesario.
    </p>
  </article>
  <article>
    <p><strong>Árboles vs. Árboles binarios</strong></p>
    <p>
      Un árbol binario es un árbol en el que cada nodo tiene hasta dos hijos. No todos los árboles son binarios. Por ejemplo, este árbol no es binario. Podría llamarse árbol ternario.
    </p>
    <div class="flex flex-col items-center">
      <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">8</div>
      <div class="flex gap-8">
        <div class="-mt-4 h-12 w-1 rotate-45 bg-black"></div>
        <div class="h-5 w-1 bg-black"></div>
        <div class="-mt-4 h-12 w-1 -rotate-45 bg-black"></div>
      </div>
      <div class="-mt-3 flex gap-4">
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">6</div>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
      </div>
      <div class="flex gap-8">
        <div class="h-9 -mt-2 w-1 rotate-45 bg-black"></div>
        <div class="h-10 -mt-2 w-1 -rotate-45 bg-black mr-24"></div>
        <div class="h-10 -mt-2 w-1 -rotate-45 bg-black"></div>
      </div>
      <div class="-mt-3 flex gap-4">
        <div class="w-12 h-12 ml-2 mr-4 border-black rounded-full border-4 flex justify-center items-center">2</div>
        <div class="w-12 h-12 mr-[60px] border-black rounded-full border-4 flex justify-center items-center">1</div>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
      </div>
    </div>
    <p>
      Hay ocasiones en las que puedes tener un árbol que no sea binario. Por ejemplo, supongamos que utilizamos un árbol para representar un grupo de números de teléfono. En este caso, podrías utilizar un árbol de 10 árboles, en el que cada nodo tiene hasta 10 hijos (uno por cada dígito).
    </p>
    <p>
      Un nodo se denomina "hoja" si no tiene hijos.
    </p>
  </article>
  <article>
    <p><strong>Árbol binario vs. árbol de búsqueda binario</strong></p>
    <p>
      Un árbol de búsqueda binario es un árbol binario en el que cada nodo se ajusta a una propiedad de ordenación específica: <code>todos los descendientes izquierdos &#60= n &#60 todos los descendientes derechos</code>. Esto debe ser cierto para cada nodo n.
    </p>
    <p class="pl-4 sm:pl-6 md:pl-8 border-l-2 sm:border-l-4 md:border-l-8 border-black">
      La definición de un árbol de búsqueda binario puede variar ligeramente con respecto a la igualdad. En algunas definiciones, el árbol no puede tener valores duplicados. En otras, los valores duplicados estarán a la derecha o pueden estar a ambos lados. Todas son definiciones válidas, pero debes aclararlo con tu entrevistador.
    </p>
    <p>
      Tenga en cuenta que esta desigualdad debe ser cierta para todos los descendientes de un nodo, no sólo para sus hijos inmediatos. El siguiente árbol de la izquierda es un árbol de búsqueda binario. El árbol de la derecha no lo es, ya que 12 está a la izquierda de 8.
    </p>
    <div class="flex justify-center gap-4">
      <div class="flex flex-col items-center">
        <p class="font-bold">Un árbol de búsqueda binario.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">8</div>
        <div class="flex gap-8">
          <div class="-mt-2 h-8 w-1 rotate-45 bg-black"></div>
          <div class="-mt-2 h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-4">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
        </div>
        <div class="flex gap-8">
          <div class="h-8 -mt-4 w-1 rotate-[40deg] bg-black"></div>
          <div class="h-8 -mt-3 w-1 ml-4 -rotate-[40deg] bg-black"></div>
          <div class="h-9 -mt-4 w-1 ml-8 -rotate-[40deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-4">
          <div class="w-12 h-12 ml-2 mr-4 border-black rounded-full border-4 flex justify-center items-center">2</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">6</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">No es un árbol de búsqueda binario.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">8</div>
        <div class="flex gap-8">
          <div class="-mt-2 h-8 w-1 rotate-45 bg-black"></div>
          <div class="-mt-2 h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-4">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
        </div>
        <div class="flex gap-8">
          <div class="h-8 -mt-4 w-1 rotate-[40deg] bg-black"></div>
          <div class="h-8 -mt-3 w-1 ml-4 -rotate-[40deg] bg-black"></div>
          <div class="h-9 -mt-4 w-1 ml-8 -rotate-[40deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-4">
          <div class="w-12 h-12 ml-2 mr-4 border-black rounded-full border-4 flex justify-center items-center">2</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">12</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
        </div>
      </div>
    </div>
    <p>
      Ante una pregunta sobre un árbol, muchos candidatos suponen que el entrevistador se refiere a un árbol de búsqueda binario. Asegúrese de preguntar. Un árbol de búsqueda binaria impone la condición de que, para cada nodo, sus descendientes izquierdos sean menores o iguales que el nodo actual, que es menor que los descendientes derechos.
    </p>
  </article>
  <article>
    <p><strong>Equilibrado vs. desequilibrado</strong></p>
    <p>
      Aunque muchos árboles están equilibrados, no todos lo están. Pida a su entrevistador que se lo aclare. Ten en cuenta que equilibrar un árbol no significa que los subárboles izquierdo y derecho tengan exactamente el mismo tamaño (como se ve en "árboles binarios perfectos" en el siguiente diagrama).
    </p>
    <p>
      Una forma de verlo es que un árbol "equilibrado" significa algo más como "no terriblemente desequilibrado": "Está lo suficientemente equilibrado como para garantizar <code>O(log n)</code> veces para <code>insert</code> y <code>find</code>, pero no está necesariamente tan equilibrado como podría estarlo".
    </p>
    <p>
      Dos tipos comunes de árboles equilibrados son los árboles rojo-negro (pág. 639) y los árboles AVL (pág. 637). Estos se discuten con más detalle en la sección de Temas Avanzados.
    </p>
  </article>
  <article>
    <p><strong>Árboles Binarios Completos</strong></p>
    <p>
      Un árbol binario completo es un árbol binario en el que cada nivel del árbol está completamente lleno, excepto quizás el último nivel. En la medida en que el último nivel está lleno, se llena de izquierda a derecha.
    </p>
    <div class="flex justify-center gap-4">
      <div class="flex flex-col items-center">
        <p class="font-bold">No es un árbol binario completo.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">5</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
        </div>
        <div class="flex gap-10 -mt-4">
          <div class="h-10 w-1 -mt-1 rotate-[50deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 -rotate-[20deg] bg-black"></div>
          <div class="h-10 w-1 -mt-1 ml-28 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-3 flex gap-9">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
          <div class="w-12 h-12 ml-20 border-black rounded-full border-4 flex justify-center items-center">30</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Es un árbol binario completo.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">5</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
        </div>
        <div class="flex gap-10 -mt-4 w-full ml-24">
          <div class="h-10 w-1 -mt-1 rotate-[50deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 -rotate-[20deg] bg-black"></div>
          <div class="h-6 w-1 mt-2 ml-16 rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-3 flex gap-9 w-full">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">30</div>
        </div>
      </div>
    </div>
  </article>
  <article>
    <p><strong>Árboles binarios Full</strong></p>
    <p>
      Un árbol binario completo es un árbol binario en el que cada nodo tiene cero o dos hijos. Es decir, ningún nodo tiene un solo hijo.
    </p>
    <div class="flex justify-center gap-4">
      <div class="flex flex-col items-center">
        <p class="font-bold">No es un árbol binario full.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">5</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
        </div>
        <div class="flex gap-8 -mt-2 w-full justify-end">
          <div class="h-9 w-1 -mt-1 mr-12 -rotate-[40deg] bg-black"></div>
          <div class="h-8 w-1 rotate-[40deg] bg-black"></div>
          <div class="h-9 w-1 mr-12 -rotate-[40deg] bg-black"></div>
        </div>
        <div class="-mt-3 flex gap-4 w-full justify-end">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">12</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
        </div>
        <div class="flex gap-10 -mt-2 ml-[90px]">
          <div class="h-8 w-1 rotate-45 bg-black"></div>
          <div class="h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-4">
          <div class="w-12 h-12 ml-[90px] border-black rounded-full border-4 flex justify-center items-center">9</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">18</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Es un árbol binario full.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">5</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
        </div>
        <div class="flex gap-8 -mt-2 w-full justify-end">
          <div class="h-8 w-1 rotate-[40deg] bg-black"></div>
          <div class="h-8 w-1 mr-8 -rotate-[40deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-4 w-full justify-end">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center -mr-1">7</div>
        </div>
        <div class="flex gap-10 -mt-2 ml-16">
          <div class="h-8 w-1 rotate-45 bg-black"></div>
          <div class="h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-4">
          <div class="w-12 h-12 ml-16 border-black rounded-full border-4 flex justify-center items-center">9</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">18</div>
        </div>
      </div>
    </div>
  </article>
  <article>
    <p><strong>Árboles binarios perfectos</strong></p>
    <p>
      Un árbol binario perfecto es un árbol completo. Todos los nodos hoja estarán en el mismo nivel, y este nivel tiene el máximo número de nodos.
    </p>
    <div class="flex justify-center gap-4">
      <div class="flex flex-col items-center">
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">10</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">5</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">20</div>
        </div>
        <div class="flex gap-10 -mt-4">
          <div class="h-10 w-1 -mt-1 rotate-[50deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 mr-9 -rotate-[20deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 ml-8 rotate-[20deg] bg-black"></div>
          <div class="h-10 w-1 -mt-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-3 flex gap-9">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">9</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">18</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
        </div>
      </div>
    </div>
    <p>
      Tenga en cuenta que los árboles perfectos son poco frecuentes en las entrevistas y en la vida real, ya que un árbol perfecto debe tener exactamente <code>2<sup>k</sup> - 1</code> nodos (donde k es el número de niveles). En una entrevista, no suponga que un árbol binario es perfecto.
    </p>
  </article>
  <article>
    <h3>► Árbol binario transversal</h3>
    <p>
      Antes de su entrevista, usted debe estar cómodo implementando en-orden, post-orden, y pre-orden transversal. El más común es el recorrido dentro del orden.
    </p>
  </article>
  <article>
    <p><strong>Recorrido en orden</strong></p>
    <p>
      El recorrido dentro del orden significa "visitar" (a menudo, imprimir) la rama izquierda, luego el nodo actual y, por último, la rama derecha.
    </p>
    <pre>
      <code class="language-js">
        void inOrderTraversal(TreeNode node) &#123
          if (node != null) &#123
            inOrderTraversal(node.left);
            visit(node);
            inOrderTraversal(node.right);
          }
        }
      </code>
    </pre>
    <p>
      Cuando se realiza en un árbol de búsqueda binario, visita los nodos en orden ascendente (de ahí el nombre "en-orden").
    </p>
  </article>
  <article>
    <p><strong>Recorrido de preorden</strong></p>
    <p>
      El recorrido preordenado visita el nodo actual antes que sus nodos hijos (de ahí el nombre "preordenado").
    </p>
    <pre>
      <code class="language-js">
        void preOrderTraversal(TreeNode node) &#123
          if (node != null) &#123
            visit(node);
            preOrderTraversal(node.left);
            preOrderTraversal(node.right);
          }
        }
      </code>
    </pre>
    <p>
      En un recorrido preordenado, la raíz es siempre el primer nodo visitado.
    </p>
  </article>
  <article>
    <p><strong>Recorrido post-orden</strong></p>
    <p>
      El recorrido post-orden visita el nodo actual después de sus nodos hijos (de ahí el nombre "post-orden").
    </p>
    <pre>
      <code class="language-js">
        void postOrderTraversal(TreeNode node) &#123
          if (node != null) &#123
            postOrderTraversal(node.left);
            postOrderTraversal(node.right);
            visit(node);
          }
        }
      </code>
    </pre>
    <p>
      En un recorrido post-orden, la raíz es siempre el último nodo visitado.
    </p>
  </article>
  <article>
    <h3>► Heaps binarios (Min-Heaps y Max-Heaps)</h3>
    <p>
      Aquí sólo hablaremos de los min-heaps. Los Max-heaps son esencialmente equivalentes, pero los elementos están en orden descendente en lugar de ascendente.
    </p>
    <p>
      Un minicúmulo es un árbol binario completo (es decir, totalmente lleno salvo los elementos situados más a la derecha en el último nivel) en el que cada nodo es más pequeño que sus hijos. La raíz, por tanto, es el elemento mínimo del árbol.
    </p>
    <div class="flex justify-center gap-4 my-8">
      <div class="flex flex-col items-center">
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-16">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">50</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
        </div>
        <div class="flex gap-10 -mt-2">
          <div class="h-8 w-1 -ml-8 rotate-[40deg] bg-black"></div>
          <div class="h-8 w-1 -rotate-[40deg] bg-black"></div>
          <div class="h-7 w-1  rotate-[40deg] mt-1 ml-8 bg-black"></div>
        </div>
        <div class="-mt-1 flex gap-4 -ml-12">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">55</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">90</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">87</div>
        </div>
      </div>
    </div>
    <p>
      Tenemos dos operaciones clave en un minicúmulo: <code>insert</code> y <code>extract_min</code>.
    </p>
    <p><em>Insertar</em>
    </p>
    <p>
      Cuando insertamos en un miniapil, siempre empezamos insertando el elemento que está más abajo. Insertamos en el punto más a la derecha para mantener la propiedad de árbol completo.
    </p>
    <p>
      A continuación, "arreglamos" el árbol intercambiando el nuevo elemento con su padre, hasta que encontremos un lugar apropiado para el elemento. Esencialmente, burbujeamos el elemento mínimo.
    </p>
    <div class="flex justify-center gap-4 my-8">
      <div class="flex flex-col items-center">
        <p class="font-bold">Paso 1: Insertar 2.</p>

        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">50</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
        </div>
        <div class="flex gap-10 -mt-4">
          <div class="h-10 w-1 -mt-1 rotate-[50deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 mr-9 -rotate-[20deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 ml-8 rotate-[20deg] bg-black"></div>
          <div class="h-10 w-1 -mt-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-3 flex gap-9">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">55</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">90</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">87</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center bg-slate-300">2</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Paso 2: Intercambiar 2 y 7.</p>

        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">50</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center bg-slate-300">2</div>
        </div>
        <div class="flex gap-10 -mt-4">
          <div class="h-10 w-1 -mt-1 rotate-[50deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 mr-9 -rotate-[20deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 ml-8 rotate-[20deg] bg-black"></div>
          <div class="h-10 w-1 -mt-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-3 flex gap-9">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">55</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">90</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">87</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Paso 3: Intercambiar 2 y 4</p>

        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center bg-slate-300">2</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-20">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">50</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
        </div>
        <div class="flex gap-10 -mt-4">
          <div class="h-10 w-1 -mt-1 rotate-[50deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 mr-9 -rotate-[20deg] bg-black"></div>
          <div class="h-5 w-1 mt-3 ml-8 rotate-[20deg] bg-black"></div>
          <div class="h-10 w-1 -mt-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-3 flex gap-9">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">55</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">90</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">87</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">7</div>
        </div>
      </div>
    </div>
    <p>
      Esto lleva un tiempo <code>O(log n)</code>, donde n es el número de nodos del montón.
    </p>
    <p>
      <em>Extraer el elemento mínimo</em>
    </p>
    <p>
      Encontrar el elemento mínimo de un miniapilamiento es fácil: siempre está en la parte superior. Lo difícil es eliminarlo. (En realidad, no es tan complicado).
    </p>
    <p>
      En primer lugar, eliminamos el elemento mínimo y lo cambiamos por el último elemento del montón (el elemento situado más a la derecha). A continuación, hacemos una burbuja hacia abajo de este elemento, intercambiándolo con uno de sus hijos hasta que se restablezca la propiedad min-heap.
    </p>
    <p>
      ¿Lo intercambiamos con el hijo izquierdo o con el derecho? Depende de sus valores. No hay un orden inherente entre el elemento izquierdo y el derecho, pero tendrás que tomar el más pequeño para mantener el orden de miniapilación.
    </p>
    <div class="flex justify-center gap-4 my-8">
      <div class="flex flex-col items-center">
        <p class="font-bold">Paso 1: Sustituir min por 80.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center bg-slate-300">80</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-16">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">50</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">23</div>
        </div>
        <div class="flex gap-6 -mt-2">
          <div class="h-8 w-1 rotate-45 bg-black"></div>
          <div class="h-8 w-1 mr-8 -rotate-45 bg-black"></div>
          <div class="h-8 w-1 ml-8 rotate-45 bg-black"></div>
          <div class="h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-2">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">88</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">90</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">32</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">74</div>
        </div>
        <div class="flex gap-6 -mt-2 w-full justify-start">
          <div class="h-8 w-1 ml-8 rotate-45 bg-slate-400"></div>
        </div>
        <div class="-mt-2 flex gap-2 w-full justify-start">
          <div class="w-12 h-12 border-slate-400 text-slate-400 rounded-full border-4 border-dotted flex justify-center items-center">80</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Paso 2: Intercambiar 23 y 80.</p>

        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">23</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-16">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">50</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center bg-slate-300">80</div>
        </div>
        <div class="flex gap-6 -mt-2">
          <div class="h-8 w-1 rotate-45 bg-black"></div>
          <div class="h-8 w-1 mr-8 -rotate-45 bg-black"></div>
          <div class="h-8 w-1 ml-8 rotate-45 bg-black"></div>
          <div class="h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-2">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">88</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">90</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">32</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">74</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Paso 3: Intercambiar 32 y 80</p>

        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">23</div>
        <div class="flex gap-12 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-[50deg] bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-[50deg] bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-16">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">50</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">32</div>
        </div>
        <div class="flex gap-6 -mt-2">
          <div class="h-8 w-1 rotate-45 bg-black"></div>
          <div class="h-8 w-1 mr-8 -rotate-45 bg-black"></div>
          <div class="h-8 w-1 ml-8 rotate-45 bg-black"></div>
          <div class="h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-2">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">80</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">90</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center bg-slate-300">80</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">74</div>
        </div>
      </div>
    </div>
    <p>
      Este algoritmo también tardará <code>O(log n)</code> veces.
    </p>
  </article>
  <article>
    <h3>► Trios (árboles prefijados)</h3>
    <p>
      Un trie (a veces llamado árbol prefijo) es una curiosa estructura de datos. Aparece mucho en las preguntas de las entrevistas, pero los libros de texto de algoritmos no dedican mucho tiempo a esta estructura de datos.
    </p>
    <p>
      Un trie es una variante de un árbol n-ario en el que se almacenan caracteres en cada nodo. Cada camino del árbol puede representar una palabra.
    </p>
    <p>
      Los nodos * (a veces llamados "nodos nulos") se utilizan a menudo para indicar palabras completas. Por ejemplo, el hecho de que haya un nodo * debajo de <code>MANY</code> indica que <code>MANY</code> es una palabra completa. La existencia de la ruta <code>MA</code> indica que hay palabras que empiezan por <code>MA</code>.
    </p>
    <p>
      La implementación real de estos * nodos podría ser un tipo especial de hijo (como un <code>TerminatingTrieNode</code>, que hereda de <code>TrieNode</code>). O bien, podríamos utilizar sólo una bandera booleana termina dentro del nodo "padre".
    </p>
    <p>
      Un nodo en un trie podría tener en cualquier lugar de 1 a <code>ALPHABET_SIZE + 1</code> hijos (o, 0 a <code>ALPHABET_SIZE</code> si una bandera booleana se utiliza en lugar de un nodo *).
    </p>
    <div class="flex justify-center gap-4 my-8">
      <div class="flex flex-col items-center">
        <p class="font-bold">Paso 1: Sustituir min por 80.</p>
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center bg-amber-900"></div>
        <div class="flex gap-6 h-10 -mt-1">
          <div class="-mt-2 h-14 w-1 rotate-45 bg-black"></div>
          <div class="h-9 w-1 bg-black"></div>
          <div class="-mt-2 h-14 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-1 flex gap-2">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">M</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">L</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">A</div>
        </div>
        <div class="flex gap-6 -mt-2">
          <div class="h-8 w-1 rotate-45 bg-black"></div>
          <div class="h-8 w-1 mr-8 -rotate-45 bg-black"></div>
          <div class="h-8 w-1 mr-8 -rotate-45 bg-black"></div>
          <div class="h-8 w-1 -rotate-45 bg-black"></div>
        </div>
        <div class="-mt-2 flex gap-2">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">A</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">Y</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">I</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">*</div>
        </div>
        <div class="flex gap-16 -mt-1">
          <div class="-ml-12 h-6 w-1 rotate-[24deg] bg-black"></div>
          <div class="h-5 w-1 bg-black"></div>
          <div class="h-6 w-1 -rotate-[24deg] bg-black"></div>
        </div>
        <div class="-mt-1 flex gap-9">
          <div class="w-12 h-12 -ml-12 border-black rounded-full border-4 flex justify-center items-center">N</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">*</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">E</div>
        </div>
        <div class="flex gap-6 self-start -mt-1">
          <div class="ml-6 h-6 w-1 bg-black"></div>
          <div class="-mt-1 h-7 ml-10 rotate-[35deg] w-1 bg-black"></div>
          <div class="h-6 ml-20 w-1 -rotate-[20deg] bg-black"></div>
        </div>
        <div class="-mt-1 flex gap-2">
          <div class="w-12 h-12 -ml-10 border-black rounded-full border-4 flex justify-center items-center">Y</div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">*</div>
          <div class="w-12 h-12 ml-20 border-black rounded-full border-4 flex justify-center items-center">*</div>
        </div>
        <div class="flex gap-6 -mt-1 self-start ml-6">
          <div class="h-5 w-1 bg-black"></div>
        </div>
        <div class="-mt-1 flex self-start">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">*</div>
        </div>
      </div>
    </div>
    <p>
      Normalmente, un trie se utiliza para almacenar todo el idioma (inglés) para búsquedas rápidas de prefijos. Mientras que una tabla hash puede buscar rápidamente si una cadena es una palabra válida, no puede decirnos si una cadena es un prefijo de cualquier palabra válida. Un trie puede hacerlo muy rápidamente.
    </p>
    <p class="pl-4 sm:pl-6 md:pl-8 border-l-2 sm:border-l-4 md:border-l-8 border-black">
      ¿Con qué rapidez? Un trie puede comprobar si una cadena es un prefijo válido en tiempo <code>O(K)</code>, donde <code>K</code> es la longitud de la cadena. En realidad, es el mismo tiempo de ejecución que tarda una tabla hash. Aunque a menudo nos referimos a las búsquedas en una tabla hash como un tiempo <code>O(K)</code>, esto no es del todo cierto. Una tabla hash debe leer todos los caracteres de la entrada, lo que requiere un tiempo <code>O(K)</code> en el caso de una búsqueda de palabras.
    </p>
    <p>
      Muchos problemas que implican listas de palabras válidas aprovechan un trie como optimización. En situaciones en las que buscamos repetidamente en el árbol prefijos relacionados (por ejemplo, buscando <code>M</code>, luego <code>MA</code>, luego <code>MAN</code>, luego <code>MANY</code>), podemos pasar una referencia al nodo actual del árbol. Esto nos permitirá comprobar simplemente si Y es hijo de <code>MAN</code>, en lugar de empezar desde la raíz cada vez.
    </p>
  </article>
  <article>
    <h3>► Graphs</h3>
    <p>
      En realidad, un árbol es un tipo de grafo, pero no todos los grafos son árboles. En pocas palabras, un árbol es un grafo conectado sin ciclos.
    </p>
    <p>
      Un grafo es simplemente una colección de nodos con aristas entre (algunos de) ellos.
    </p>
    <ul>
      <li>Los grafos pueden ser dirigidos (como el siguiente) o no dirigidos. Mientras que las aristas dirigidas son unidireccionales, las no dirigidas son bidireccionales.</li>
      <li>El grafo puede estar formado por varios subgrafos aislados. Si existe un camino entre cada par de vértices, se denomina "grafo conexo".</li>
      <li>El grafo también puede tener ciclos (o no). Un "grafo acíclico" es un grafo sin ciclos.</li>
    </ul>
    <p>
      Visualmente, se puede dibujar un grafo como éste:
    </p>
    <div class="flex justify-center gap-8 my-8">
      <div class="flex flex-col -rotate-12 items-center">
        <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">6</div>
        <div class="flex items-center h-10 -mt-1">
          <div class="flex items-center rotate-[130deg]">
            <span class="w-12 -mr-2 h-1 bg-black"></span><span>►</span>
          </div>
          <div class="flex items-center rotate-45">
            <span>◀︎</span><span class="w-12 -ml-2 h-1 bg-black"></span>
          </div>
        </div>
        <div class="-mt-1 flex items-center">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">5</div>
          <span class="w-12 h-1 bg-black -mr-2"></span><span>►</span>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <div class="-mt-1 flex items-center">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">0</div>
          <span class="w-12 h-1 bg-black -mr-2"></span><span>►</span>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">1</div>
        </div>
        <div class="flex items-center h-14 -mt-1">
          <div class="flex items-center -mr-2 -rotate-[135deg]">
            <span class="w-20 -mr-2 h-1 bg-black"></span><span>►</span>
          </div>
          <div class="flex items-center -mr-8 -rotate-90">
            <span>◀︎</span><span class="w-8 -ml-2 h-1 bg-black"></span>
          </div>
        </div>
        <div class="-mt-1 flex items-center">
          <div class="w-12 h-12 border-black -mt-6 rounded-full border-4 flex justify-center items-center">3</div>
          <div class="flex flex-col rotate-12 -mt-2">
            <div class="flex h-4 flex-nowrap items-center">
              <span class="w-12 h-1 bg-black -mr-2"></span><span>►</span>
            </div>
            <div class="flex h-4 flex-nowrap items-center">
              <span>◀︎</span><span class="w-12 h-1 bg-black -ml-2"></span>
            </div>
          </div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">2</div>
        </div>
      </div>
    </div>
    <p>
      En términos de programación, hay dos formas habituales de representar un grafo.
    </p>
  </article>
  <article>
    <p><strong>Lista de adyacencia</strong></p>
    <p>
      Es la forma más habitual de representar un grafo. Cada vértice (o nodo) almacena una lista de vértices adyacentes. En un grafo no dirigido, una arista como <code>(a, b)</code> se almacenaría dos veces: una en los vértices adyacentes de a y otra en los vértices adyacentes de b.
    </p>
    <p>
      Una definición de clase simple para un nodo de grafo podría ser esencialmente la misma que para un nodo de árbol.
    </p>
    <pre>
      <code class="language-js">
        class Graph &#123
          public Node[] nodes;
        }

        class Node &#123
          public String name;
          public Node[] children;
        }
      </code>
    </pre>
    <p>
      La clase Graph se utiliza porque, a diferencia de un árbol, no se puede llegar necesariamente a todos los nodos desde un único nodo.
    </p>
    <p>      
      No necesitas necesariamente ninguna clase adicional para representar un grafo. Un array (o una tabla hash) de listas (arrays, arraylists, linked lists, etc.) puede almacenar la lista de adyacencia. El grafo anterior podría representarse como:
    </p>
    <pre>
      <code class="language-js">
        0: 1
        1: 2
        2: 0, 3
        3: 2
        4: 6
        5: 4
        6: 5
      </code>
    </pre>
    <p>
      Esto es un poco más compacto, pero no es tan limpio. Tendemos a utilizar clases de nodos a menos que haya una razón de peso para no hacerlo.
    </p>
  </article>
  <article>
    <p><strong>Matrices de adyacencia</strong></p>
    <p>
      Una matriz de adyacencia es una matriz booleana <code>NxN</code> (donde <code>N</code> es el número de nodos), donde un valor <code>true</code> en <code>matrix[i][j]</code> indica una arista del nodo <code>i</code> al nodo <code>j</code>. (También se puede utilizar una matriz entera con <code>0s</code> y <code>1s</code>.)
    </p>
    <p>
      En un grafo no dirigido, una matriz de adyacencia será simétrica. En un grafo dirigido, no lo será (necesariamente).
    </p>
    <div class="flex justify-center gap-24 my-8">
      <div class="flex flex-col items-center">
        <div class="-mt-1 flex items-center">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">0</div>
          <span class="w-12 h-1 bg-black -mr-2"></span><span>►</span>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">1</div>
        </div>
        <div class="flex items-center h-14 -mt-1">
          <div class="flex items-center -mr-2 -rotate-[135deg]">
            <span class="w-20 -mr-2 h-1 bg-black"></span><span>►</span>
          </div>
          <div class="flex items-center -mr-8 -rotate-90">
            <span>◀︎</span><span class="w-8 -ml-2 h-1 bg-black"></span>
          </div>
        </div>
        <div class="-mt-1 flex items-center">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
          <div class="flex flex-col">
            <div class="flex h-4 flex-nowrap items-center">
              <span class="w-12 h-1 bg-black -mr-2"></span><span>►</span>
            </div>
          </div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">2</div>
        </div>
      </div>
      <table>
        <thead>
          <tr>
            <td class="py-0"></td>
            <td class="py-0">0</td>
            <td class="py-0">1</td>
            <td class="py-0">2</td>
            <td class="py-0">3</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="py-0 bg-slate-300">0</td>
            <td class="py-0">0</td>
            <td class="py-0">1</td>
            <td class="py-0">0</td>
            <td class="py-0">0</td>
          </tr>
          <tr>
            <td class="py-0 bg-slate-300">1</td>
            <td class="py-0">0</td>
            <td class="py-0">0</td>
            <td class="py-0">1</td>
            <td class="py-0">0</td>
          </tr>
          <tr>
            <td class="py-0 bg-slate-300">2</td>
            <td class="py-0">1</td>
            <td class="py-0">0</td>
            <td class="py-0">0</td>
            <td class="py-0">0</td>
          </tr>
          <tr>
            <td class="py-0 bg-slate-300">3</td>
            <td class="py-0">0</td>
            <td class="py-0">0</td>
            <td class="py-0">1</td>
            <td class="py-0">0</td>
          </tr>
        </tbody>
      </table>
    </div>
    <p>
      Los mismos algoritmos de grafos que se utilizan en las listas de adyacencia (búsqueda de amplitud primero, etc.) se pueden realizar con matrices de adyacencia, pero pueden ser algo menos eficientes. En la representación de lista de adyacencia, se puede iterar fácilmente a través de los vecinos de un nodo. En la representación de la matriz de adyacencia, tendrá que recorrer todos los nodos para identificar a los vecinos de un nodo.
    </p>
  </article>
  <article>
    <h3>► Búsqueda en grafos</h3>
    <p>
      Las dos formas más habituales de buscar en un grafo son la búsqueda en profundidad (depth-first search) y la búsqueda en amplitud (breadth-first search).
    </p>
    <p>
      En la búsqueda en profundidad (DFS), empezamos en la raíz (o en otro nodo seleccionado arbitrariamente) y exploramos cada rama por completo antes de pasar a la siguiente. Es decir, primero exploramos en profundidad (de ahí el nombre de búsqueda en profundidad) antes de explorar en profundidad.
    </p>
    <p>
      En la búsqueda amplia primero (BFS), empezamos en la raíz (u otro nodo seleccionado arbitrariamente) y exploramos cada vecino antes de pasar a cualquiera de sus hijos. Es decir, vamos a lo ancho (de ahí lo de búsqueda <em>breadth-first</em>) antes de ir a lo profundo.
    </p>
    <p>
      Véase la siguiente representación de un grafo y sus búsquedas en profundidad y amplitud (suponiendo que los vecinos se iteran en orden numérico).
    </p>
    <div class="flex justify-center gap-24 my-8">
      <div class="flex flex-col items-center">
        <p class="font-bold">Grafos</p>
        <div class="-mt-1 flex items-center">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">0</div>
          <span class="w-12 h-1 bg-black -mr-2"></span><span>►</span>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">1</div>
          <span>◀︎</span><span class="w-12 h-1 bg-black -ml-2"></span>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">2</div>
        </div>
        <div class="flex items-center h-14 -mt-1">
          <div class="flex items-center -rotate-90">
            <span>◀︎</span><span class="w-8 mr-2 -ml-2 h-1 bg-black"></span>
          </div>
          <div class="flex items-center -ml-5 rotate-45">
            <span class="w-20 h-1 -mr-2 bg-black"></span><span>►</span>
          </div>
          <div class="flex items-center -ml-4 -rotate-90">
            <span>◀︎</span><span class="w-8 mr-2 -ml-2 h-1 bg-black"></span>
          </div>
          <div class="flex items-center -ml-6 rotate-45">
            <span class="w-20 -mr-2 h-1 bg-black"></span><span>►</span>
          </div>
          <div class="flex items-center -ml-2 rotate-90">
            <span>◀︎</span><span class="w-8 -ml-2 h-1 bg-black"></span>
          </div>
        </div>
        <div class="-mt-1 flex items-center">
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">5</div>
          <div class="w-14"></div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">4</div>
          <div class="flex flex-col">
            <div class="flex h-4 flex-nowrap items-center">
              <span>◀︎</span><span class="w-12 h-1 bg-black -ml-2"></span>
            </div>
          </div>
          <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
        </div>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Depth-First Search</p>
        <code>Node 0</code>
        <code class="ml-4">Node 1</code>
        <code class="ml-8">Node 3</code>
        <code class="ml-12">Node 2</code>
        <code class="ml-16">Node 4</code>
        <code>Node 5</code>
      </div>
      <div class="flex flex-col items-center">
        <p class="font-bold">Breadth-First Search</p>
        <code>Node 0</code>
        <code>Node 1</code>
        <code>Node 4</code>
        <code>Node 5</code>
        <code>Node 3</code>
        <code>Node 2</code>
      </div>
    </div>
    <p>
      La búsqueda exhaustiva y la búsqueda profunda se suelen utilizar en escenarios diferentes. A menudo se prefiere DFS si queremos visitar todos los nodos del grafo. Ambas funcionarán bien, pero la búsqueda en profundidad es un poco más sencilla.
    </p>
    <p>
      Sin embargo, si queremos encontrar el camino más corto (o cualquier camino) entre dos nodos, BFS es generalmente mejor. Consideremos la representación de todas las amistades del mundo entero en un grafo e intentemos encontrar un camino de amigos entre Ash yVanessa.
    </p>
    <p>
      En la búsqueda en profundidad, podríamos tomar un camino como <code>Ash -> Brian -> Carleton -> Davis -> Eric -> Farah -> Gayle -> Harry -> Isabella -> John -> Kari</code>... y luego encontrarnos muy lejos. Podríamos recorrer la mayor parte del mundo sin darnos cuenta de que, de hecho, Vanessa es amiga de Ash. Aún así, al final encontraremos el camino, pero puede que nos lleve mucho tiempo. Tampoco encontraremos el camino más corto.
    </p>
    <p>
      En una búsqueda amplia, nos mantendríamos cerca de Ash el mayor tiempo posible. Podríamos iterar a través de muchos de los amigos de Ash, pero no iríamos a sus conexiones más distantes hasta que fuera absolutamente necesario. Si Vanessa es amiga de Ash, o amiga de un amigo, lo averiguaremos relativamente rápido.
    </p>
    <p>
      Búsqueda en profundidad (DFS)
    </p>
    <p>
      En DFS, visitamos un nodo a y luego iteramos a través de cada uno de los vecinos de a. Cuando visitamos un nodo b que es vecino de a, visitamos todos los vecinos de b antes de pasar a los demás vecinos de a. Es decir, a busca exhaustivamente en la rama de b antes que en cualquiera de sus otros vecinos. Es decir, a busca exhaustivamente en la rama de b antes que en cualquiera de sus otros vecinos.
    </p>
    <p>
      Tenga en cuenta que el preorden y otras formas de recorrer árboles son una forma de DFS. La diferencia clave es que al implementar este algoritmo para un grafo, debemos comprobar si el nodo ha sido visitado. Si no lo hacemos, corremos el riesgo de quedar atrapados en un bucle infinito.
    </p>
    <p>
      El pseudocódigo siguiente implementa DFS.
    </p>
    <pre>
      <code class="language-js">
        void search(Node root) &#123
          if (root == null) return;
          visit(root);
          root.visited = true;
          for each (Node n in root.adjacent) &#123
            if (n.visited == false) &#123
              search(n);
            }
          }
        }
      </code>
    </pre>
    <p>
      Búsqueda amplia (BFS)
    </p>
    <p>
      BFS es un poco menos intuitiva, y muchos entrevistados tienen dificultades con la implementación a menos que ya estén familiarizados con ella. El principal escollo es la (falsa) suposición de que BFS es recursiva. No lo es. En su lugar, utiliza una cola.
    </p>
    <p>
      En BFS, el nodo a visita cada uno de los vecinos de a antes de visitar cualquiera de sus vecinos. Se puede pensar en esto como la búsqueda de nivel por nivel a partir de a. Una solución iterativa que implica una cola por lo general funciona mejor.
    </p>
    <pre>
      <code class="language-js">
        void search(Node root) &#123
          Queue queue = new Queue();
          root.marked = true;
          queue.enqueue(root); // Add to the end of queue
          while (!queue.isEmpty()) &#123
            Node r= queue.dequeue(); // Remove from the front of the queue
            visit(r);
            foreach (Node n in r.adjacent) &#123
              if (n.marked == false) &#123
                n.marked = true;
                queue.enqueue(n);
              }
            }
          }
        }
      </code>
    </pre>
    <p>
      Si se le pide que implemente DFS, la clave que debe recordar es el uso de la cola. El resto del algoritmo se deriva de este hecho.
    </p>
    <p>
      Búsqueda bidireccional
    </p>
    <p>
      La búsqueda bidireccional se utiliza para encontrar el camino más corto entre un nodo de origen y otro de destino. Funciona básicamente ejecutando dos búsquedas simultáneas, una desde cada nodo. Cuando sus búsquedas colisionan, hemos encontrado un camino.
    </p>
    <div class="flex justify-center gap-24 my-8">
      <div class="flex flex-1 flex-col items-center">
        <p class="font-bold">Breadth-First Search</p>
        <p>Búsqueda única de s tot que colisiona después de cuatro niveles.</p>
        <img src="/breadth-First.png" alt="imagen de breadth-First">
      </div>
      <div class="flex flex-1 flex-col items-center">
        <p class="font-bold">Bidirectional Search</p>
        <p>Dos búsquedas (una desde s y otra desdet) que chocan después de cuatro niveles en total (dos niveles cada una).</p>
        <img src="/bidirectional.png" alt="imagen de bidirectional">
      </div>
    </div>
    <p>
      Para ver por qué es más rápido, consideremos un grafo en el que cada nodo tiene como máximo <code>k</code> nodos adyacentes y el camino más corto del nodo <code>s</code> al nodo <code>t</code> tiene una longitud <code>d</code>.
    </p>
    <p>
      <ul>
        <li>
          En una búsqueda tradicional, buscaríamos hasta <code>k</code> nodos en el primer "nivel" de la búsqueda. En el segundo nivel, buscaríamos hasta k nodos por cada uno de esos primeros <code>k</code> nodos, es decir, <code>k<sup>2</sup></code> nodos en total (hasta ahora). Haríamos esto d veces, por lo que serían <code>O(kd)</code> nodos.
        </li>
        <li>
          En la búsqueda bidireccional, tenemos dos búsquedas que colisionan después de aproximadamente <code><sup>d</sup>&frasl;<sub>2</sub></code> niveles (el punto medio del camino). La búsqueda desde <code>s</code> visita aproximadamente <code>k<sup>d/2</sup></code>, al igual que la búsqueda desde <code>t</code>. Eso es aproximadamente <code>2 k<sup>d/2</sup></code>, o <code>O(k<sup>d/2</sup>)</code>, nodos en total.
        </li>
      </ul>
    </p>
    <p>
      Puede parecer una diferencia menor, pero no lo es. Es enorme. Recuerde que <code>(k<sup>d/2</sup>)*(k<sup>d/2</sup>) = k<sup>d</sup></code>. La búsqueda bidireccional es en realidad más rápido por un factor de <code>k<sup>d/2</sup></code>.
    </p>
    <p>
      Dicho de otro modo: si nuestro sistema sólo permitía la búsqueda de rutas "amigo de amigo" en la búsqueda de "amplitud primero", ahora probablemente permita la búsqueda de rutas "amigo de amigo de amigo de amigo". Las rutas pueden ser el doble de largas.
    </p>
    <p>
      <strong>Lectura adicional:</strong> Ordenación Topológica (pg 632), Algoritmo de Dijkstra (pg 633), Árboles AVL (pg 637), Árboles Rojos Negros (pg 639).
    </p>
  </article>
  <article>
    <h3 class="border-y-2 border-black">Preguntas de la entrevista</h3>
    <ul>
      <li class="list-none">
        <strong>4.1 Ruta entre nodos: </strong>
        Dado un grafo dirigido, diseñar un algoritmo para averiguar si existe una ruta entre dos nodos.
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #127</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 241</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.2 Árbol mínimo: </strong>
        Dada una matriz ordenada (orden creciente) con elementos enteros únicos, escriba un algoritmo para crear un árbol de búsqueda binario con altura mínima.
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #79,#73,#776</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 242</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.3 Lista de profundidades: </strong>
        Dado un árbol binario, diseña un algoritmo que cree una lista enlazada de todos los nodos en cada profundidad (por ejemplo, si tienes un árbol con profundidad D, tendrás D listas enlazadas).
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #107, #123, #135</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 243</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.4 Comprobar equilibrado: </strong>
        Implementar una función para comprobar si un árbol binario está equilibrado. Para los propósitos de esta pregunta, un árbol equilibrado se define como un árbol tal que las alturas de los dos subárboles de cualquier nodo nunca difieren en más de uno.
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #21, #33, #49, #705, #724</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 244</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.5 Validar BST: </strong>
        Implementar una función para comprobar si un árbol binario es un árbol de búsqueda binario.
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #35, #57, #86, #113, #128</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 245</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.6 Sucesor: </strong>
        Escriba un algoritmo para encontrar el "siguiente" nodo (es decir, sucesor en orden) de un nodo dado en un árbol de búsqueda binario. Puede suponer que cada nodo tiene un enlace a su padre.
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #79, #91</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 245</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.7 Orden de construcción: </strong>
        Se le da una lista de proyectos y una lista de dependencias (que es una lista de pares de proyectos, donde el segundo proyecto depende del primero). Todas las dependencias de un proyecto deben construirse antes que el proyecto. Busque un orden de compilación que permita compilar los proyectos. Si no hay un orden de compilación válido, devuelve un error.
        <p>EJEMPLO</p>
        <p>Input:</p>
        <p><code>projects: a, b, c, d, e, f</code></p>
        <p><code>dependencies: (a, d), (f, b), (b, d), (f, a), (d, c)</code></p>
        <p>Output: <code>f, e, a, b, d, c</code></p>
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #26, #47, #60, #85, #725, #133</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 250</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.8 Primer antepasado común: </strong>
        Diseñar un algoritmo y escribir código para encontrar el primer ancestro común de dos nodos en un árbol binario. Evita almacenar nodos adicionales en una estructura de datos. NOTA: No se trata necesariamente de un árbol de búsqueda binario.
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #70, #76, #28, #36, #46, #70, #80, #96</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 257</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.9 Secuencias BST: </strong>
        Se ha creado un árbol de búsqueda binario recorriendo un array de izquierda a derecha e insertando cada elemento. Dado un árbol de búsqueda binario con elementos distintos, imprimir todas las posibles matrices que podrían haber llevado a este árbol.
        <p>EJEMPLO</p>
        <p>Input:</p>
        <div class="flex justify-center gap-8 my-8">
          <div class="flex flex-col items-center">
            <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">2</div>
            <div class="flex items-center h-10 -mt-1">
              <div class="flex items-center rotate-[130deg]">
                <span class="w-12 -mr-2 h-1 bg-black"></span><span>►</span>
              </div>
              <div class="flex items-center rotate-45">
                <span class="w-12 -mr-2 h-1 bg-black"></span><span>►</span>
              </div>
            </div>
            <div class="-mt-1 flex items-center">
              <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">1</div>
              <span class="w-14 -mr-2"></span>
              <div class="w-12 h-12 border-black rounded-full border-4 flex justify-center items-center">3</div>
            </div>
          </div>
        </div>
        <p><code>Output: &#123 2, 1, 3 }, &#123 2, 3, 1}</code></p>
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #39, #48, #66, #82</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 262</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.10 Comprobar subárbol: </strong>
        <code>T1</code> y <code>T2</code> son dos árboles binarios muy grandes, siendo <code>T1</code> mucho mayor que <code>T2</code>. Crea un algoritmo para determinar si <code>T2</code> es un subárbol de <code>T1</code>.
        <p>
          Un árbol <code>T2</code> es un subárbol de <code>T1</code> si existe un nodo n en <code>T1</code> tal que el subárbol de n es idéntico a <code>T2</code>. Es decir, si se corta el árbol en el nodo n, los dos árboles serían idénticos.
        </p>
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #4, #11, #18, #31, #37</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 265</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.11 Nodo Aleatorio: </strong>
        Estás implementando una clase de árbol binario desde cero que, además de <code>insert</code>, <code>find</code> y <code>delete</code>, tiene un método <code>getRandomNode()</code> que devuelve un nodo aleatorio del árbol. Todos los nodos deben tener la misma probabilidad de ser elegidos. Diseña e implementa un algoritmo para <code>getRandomNode</code>, y explica cómo implementarías el resto de métodos.
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #42, #54, #62, #75, #89, #99, #112, #119</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 268</strong> </p>
        </div>
      </li>
      <li class="list-none">
        <strong>4.12 Caminos con Suma: </strong>
        Se le da un árbol binario en el que cada nodo contiene un valor entero (que puede ser positivo o negativo). Diseña un algoritmo para contar el número de caminos que suman un valor dado. No es necesario que el camino empiece o termine en la raíz o en una hoja, pero debe ir hacia abajo (viajando sólo de nodos padres a nodos hijos).
        <div class="flex justify-between items-end gap-2">
          <p><em>Pistas: #6, #14, #52, #68, #77, #87, #94, #103, #108, #115</em> 
          </p>
          <p class="border-t-2 border-black flex-1 border-dashed"></p>
          <p><strong>pg 272</strong> </p>
        </div>
      </li>
    </ul>
    <p>
      Preguntas adicionales: Recursión (#8.10), Diseño de sistemas y escalabilidad (#9.2, #9.3), Ordenación y búsqueda (#10.10), Problemas difíciles (#17.7, #17.12, #17.13, #17.14, #17.17, #17.20, #17.22, #17.25).
    </p>
    <p>Los consejos empiezan en la página 653.</p>
  </article>
  <footer class="flex justify-end">
    <a class="font-khand font-bold text-3xl py-4 sm:py-8 md:py-12 sm:text-4xl md:text-5xl" href="capitulo-5">
      <div class="transition-all text-nowrap relative ease-linear duration-500 w-28 sm:w-40 md:w-52
      hover:w-36 sm:hover:w-48 md:hover:w-56  hover:text-sky-500
      after:content-['↦'] after:text-red-500 after:transition-all after:ease-linear after:duration-500 after:opacity-0 after:relative after:-left-3 
      hover:after:content-['↦'] hover:after:transition-all hover:after:ease-linear hover:after:duration-500 hover:after:opacity-100 hover:after:left-3"> Capitulo 5</div>
    </a>
  </footer>
</Layoutcracking>