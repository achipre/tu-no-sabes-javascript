---
import Navegation from "../../components/Navegation.astro";
import Layoutjavascript from "../../layouts/Layoutjavascript.astro";
---
<Layoutjavascript title="JavaScript: La guia definitiva">
  <Navegation capAnterior="capitulo-6" capSiguiente="capitulo-8" />
  <section class="fadeIn">
    <h1>Arrays</h1>
    <p>Este capítulo documenta los arrays, un tipo de datos fundamental en JavaScript y en
      la mayoría de los demás lenguajes de programación. Un <em>array</em> es una colección
      ordenada de valores. Cada valor se llama <em>elemento</em>, y cada elemento tiene una
      posición numérica en el array, conocida como su <em>índice</em>. Las matrices de JavaScript
      son <em>no tipadas</em>: un elemento de una matriz puede ser de cualquier tipo, y distintos
      elementos de la misma matriz pueden ser de tipos diferentes. Los elementos de una
      matriz pueden ser incluso objetos u otras matrices, lo que permite crear estructuras
      de datos complejas, como matrices de objetos y matrices de matrices. Las matrices de
      JavaScript se <em>basan en ceros</em> y utilizan índices de 32 bits: el índice del primer elemento
      es 0, y el índice más alto posible es 4294967294 (2<sup class="bg-transparent mx-0 px-1">32</sup>-2), para un tamaño máximo de matriz de 4.294.967.295 elementos. Las matrices de JavaScript son <em>dinámicas</em>: crecen
      o decrecen según las necesidades, y no es necesario declarar un tamaño fijo para la
      matriz cuando se crea ni reasignarla cuando cambia el tamaño. Las matrices de
      JavaScript pueden ser <em>dispersas</em>: los elementos no tienen por qué tener índices
      contiguos y puede haber huecos. Todas las matrices de JavaScript tienen una
      propiedad de <codeinline>length</codeinline>. Para las matrices no dispersas, esta propiedad especifica el
      número de elementos de la matriz. En las matrices dispersas, la <codeinline>length</codeinline> es mayor
      que el índice más alto de cualquier elemento.</p>
    <p>Los arrays JavaScript son una forma especializada de objeto JavaScript, y los índices
      de los arrays son realmente poco más que nombres de propiedades que resultan ser
      enteros. Hablaremos más sobre las especializaciones de los arrays en otra parte de
      este capítulo. Las implementaciones suelen optimizar los arrays para que el acceso a
      los elementos indexados numéricamente sea mucho más rápido que el acceso a las
      propiedades de los objetos normales.</p>
    <p>Los arrays heredan propiedades de <codeinline>Array.prototype</codeinline>, que define un rico conjunto de
      métodos de manipulación de arrays, tratados en <a href="capitulo-7#8">§7.8</a>. La mayoría de estos métodos
      son <em>genéricos</em>. La mayoría de estos métodos son genéricos, lo que significa que funcionan correctamente no sólo para arrays verdaderos, sino para cualquier "objeto
      tipo array". Hablaremos de los objetos tipo array en <a href="capitulo-7#9">§7.9</a>. Por último, las cadenas de
      JavaScript se comportan como matrices de caracteres, y hablaremos de ello en <a href="capitulo-7#10">§7.10</a>.</p>
    <p>ES6 introduce un conjunto de nuevas clases de arrays conocidas colectivamente
      como "arrays tipados". A diferencia de las matrices normales de JavaScript, las
      matrices tipadas tienen una longitud fija y un tipo de elemento numérico fijo.
      Ofrecen un alto rendimiento y acceso a nivel de byte a los datos binarios y se tratan
      en <a href="capitulo-11#2">§11.2</a>.</p>
  </section>
  <section class="py-4 xs:py-5 sm:py-6">
    <h2>7.1 Creación de Arrays</h2>
    <p>Existen varias formas de crear matrices. Las subsecciones siguientes explican cómo crear matrices con:</p>
    <ul>
      <li class="font-normal">Matrices literales</li>
      <li class="font-normal">El operador <codeinline>...</codeinline> spread sobre un objeto iterable</li>
      <li class="font-normal">El constructor <codeinline>Array()</codeinline></li>
      <li class="font-normal">Los métodos de fábrica <codeinline>Array.of()</codeinline> y <codeinline>Array.from()</codeinline></li>
    </ul>
  </section>
  <section>
    <h2>7.1.1 Arrays literales</h2>
    <p>La forma más sencilla de crear una matriz es con un literal de matriz, que no es más que una lista separada por comas de elementos de matriz entre corchetes. Por ejemplo:</p>
    <pre>
    <code class="language-js">let empty = []; // Un array sin elementos
    let primes = [2, 3, 5, 7, 11]; // Un array con cinco elementos numéricos
    let misc = [ 1.1, true, "a", ]; // 3 elementos de varios tipos + coma al final</code></pre>
    <p>Los valores de un literal de matriz no tienen por qué ser constantes; pueden ser expresiones arbitrarias:</p>
    <pre>
    <code class="language-js">let base = 1024;
    let table = [base, base+1, base+2, base+3];</code></pre>
    <p>Los literales de matriz pueden contener literales de objeto u otros literales de matriz:</p>
    <pre>
    <code class="language-js">let b = [[1, &lbrace;x: 1, y: 2}], [2, &lbrace;x: 3, y: 4}]];</code></pre>
    <p>Si un literal de matriz contiene varias comas seguidas sin ningún valor entre ellas, la matriz es dispersa (véase <a href="capitulo-7#3">§7.3</a>). Los elementos de la matriz para los que se omiten valores no existen, pero aparecen como <codeinline>undefined</codeinline> si se consultan:</p>
    <pre>
    <code class="language-js">let count = [1,,3]; // Elementos con indice 0 y 2. Ningun elemento en el índice 1.
    let undefs = [,,]; // Un array sin elementos pero con longitud 2.</code></pre>
    <p>La sintaxis literal de matriz permite una coma final opcional, por lo que <codeinline>[,,]</codeinline> tiene una longitud de 2, no de 3.</p>
  </section>
</Layoutjavascript>