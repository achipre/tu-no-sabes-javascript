---
import Navegation from "../../components/Navegation.astro";
import Layoutjavascript from "../../layouts/Layoutjavascript.astro";
---
<Layoutjavascript title="JavaScript: La guia definitiva">
  <Navegation capAnterior="capitulo-7" capSiguiente="capitulo-9" />
  <section class="fadeIn">
    <h1>Funciones</h1>
    <p>Este capítulo trata sobre las funciones de JavaScript. Las funciones son un bloque de construcción fundamental para los programas JavaScript y una característica común en casi todos los lenguajes de programación. Puede que ya estés familiarizado con el concepto de función bajo un nombre como <em>subrutina</em> o <em>procedimiento</em>.</p>
    <p>Una <em>función</em> es un bloque de código JavaScript que se define una vez, pero que puede ejecutarse o <em>invocarse</em> tantas veces como se desee. Las funciones JavaScript están <em>parametrizadas</em>: la definición de una función puede incluir una lista de identificadores, conocidos como <em>parámetros</em>, que funcionan como variables locales para el cuerpo de la función. Las invocaciones de funciones proporcionan valores, o <em>argumentos</em>, para los parámetros de la función. Las funciones suelen utilizar los valores de sus argumentos para calcular un <em>valor de retorno</em> que se convierte en el valor de la expresión de invocación de la función. Además de los argumentos, cada invocación tiene otro valor, el <em>contexto de invocación</em>, que es el valor de la palabra clave <codeinline>this</codeinline>.</p>
    <p>Si una función se asigna a una propiedad de un objeto, se denomina <em>método</em> de ese objeto. Cuando una función es invocada <em>sobre</em> o <em>a través</em> de un objeto, ese objeto es el contexto de invocación o el valor <codeinline>this</codeinline> para la función. Las funciones diseñadas para inicializar un objeto recién creado se llaman <em>constructores</em>. Los constructores se describieron en <a href="capitulo-6#2">§6.2</a> y se tratarán de nuevo en el <a href="capitulo-9">Capítulo 9</a>.</p>
    <p>En JavaScript, las funciones son objetos y pueden ser manipuladas por los programas. Java Script puede asignar funciones a variables y pasarlas a otras funciones, por ejemplo. Como las funciones son objetos, se les pueden asignar propiedades e incluso invocar métodos.</p>
    <p>Las definiciones de funciones JavaScript pueden anidarse dentro de otras funciones, y tienen acceso a cualquier variable que esté en el ámbito en el que se definen. Esto significa que las funciones JavaScript son <em>closures</em>, y permite importantes y potentes técnicas de programación.</p>
  </section>
  <section id="1" class="py-4 xs:py-5 sm:py-6">
    <h2>8.1 Definición de funciones</h2>
    <p>La forma más sencilla de definir una función JavaScript es con la palabra clave <codeinline>function</codeinline>, que puede utilizarse como declaración o como expresión. ES6 define una nueva forma importante de definir funciones sin la palabra clave <codeinline>function</codeinline>: las "funciones flecha" tienen una sintaxis particularmente compacta y son útiles cuando se pasa una función como argumento a otra función. Las subsecciones siguientes cubren estas tres formas de definir funciones. Tenga en cuenta que algunos detalles de la sintaxis de definición de funciones que implican parámetros de función se posponen a <a href="#3">§8.3</a>.</p>
    <p>En los literales de objeto y en las definiciones de clase, existe una cómoda sintaxis abreviada para definir métodos. Esta sintaxis abreviada se trató en <a href="capitulo-6#10-5">§6.10.5</a> y es equivalente a utilizar una expresión de definición de función y asignarla a una propiedad de objeto utilizando la sintaxis literal de objeto básica <codeinline>name:value</codeinline>. En otro caso especial, puede utilizar las palabras clave <codeinline>get</codeinline> y <codeinline>set</codeinline> en los literales de objeto para definir métodos getter y setter de propiedades especiales. Esta sintaxis de definición de función se trató en <a href="capitulo-6#10-6">§6.10.6</a>.</p>
    <p>Tenga en cuenta que las funciones también pueden definirse con el constructor <codeinline>Function()</codeinline>, que es el tema de <a href="capitulo-8#7-7">§8.7.7</a>. Además, JavaScript define algunos tipos especializados de funciones. <codeinline>function*</codeinline> define funciones generadoras (véase el <a href="capitulo-12">Capítulo 12</a>) y <codeinline>async function</codeinline> define funciones asíncronas (véase el <a href="capitulo-13">Capítulo 13</a>).</p>
  </section>
  <section id="1-1">
    <h2>8.1.1 Declaraciones de funciones</h2>
    <p>Las declaraciones de funciones constan de la palabra clave <codeinline>function</codeinline>, seguida de estos componentes:</p>
    <ul>
      <li class="font-normal">Identificador que da nombre a la función. El nombre es una parte obligatoria de las declaraciones de función: se utiliza como nombre de una variable, y el objeto de función recién definido se asigna a la variable.</li>
      <li class="font-normal">Un par de paréntesis alrededor de una lista separada por comas de cero o más identificadores. Estos identificadores son los nombres de los parámetros de la función y se comportan como variables locales dentro del cuerpo de la función.</li>
      <li class="font-normal">Un par de llaves con cero o más sentencias JavaScript en su interior. Estas sentencias son el cuerpo de la función: se ejecutan cada vez que se invoca la función.</li>
    </ul>
    <p>He aquí algunos ejemplos de declaración de funciones:</p>
    <pre>
    <code class="language-js">// Imprime el nombre y el valor de cada propiedad de o. Retorna undefined.
    function printprops(o) &lbrace;
      for(let p in o) &lbrace;
        console.log(`$&lbrace;p}: $&lbrace;o[p]}\n`);
      }
    }

    // Calcula la distancia entre el punto (x1,y1) y el punto (x2,y2)
    function distance(x1, y1, x2, y2) &lbrace;
      let dx = x2 - x1;
      let dy = y2 - y1;
      return Math.sqrt(dx*dx + dy*dy);
    }

    // Una función recursiva (que se llama a si misma) que calcula factoriales
    // Recordemos que x! es el producto de x por todos los números menores que x
    function factorial(x) &lbrace;
      if (x &lt;= 1) return 1;
      return x * factorial(x-1);
    }</code></pre>
    <p>Una de las cosas importantes que hay que entender sobre las declaraciones de función es que el nombre de la función se convierte en una variable cuyo valor es la propia función. Las declaraciones de función se "elevan" a la parte superior del script, función o bloque que las contiene, de modo que las funciones definidas de este modo pueden invocarse desde el código que aparece antes de la definición. Otra forma de decir esto es que todas las funciones declaradas en un bloque de código JavaScript se definirán a lo largo de ese bloque, y se definirán antes de que el intérprete de JavaScript comience a ejecutar cualquiera de los códigos de ese bloque.</p>
    <p>Las funciones <codeinline>distancia()</codeinline> y <codeinline>factorial()</codeinline> que hemos descrito están diseñadas para calcular un valor, y utilizan return para devolver ese valor a su invocador. La sentencia <codeinline>return</codeinline> hace que la función deje de ejecutarse y devuelva el valor de su expresión (si existe) a quien la llama. Si la sentencia return no tiene una expresión asociada, el valor de retorno de la función es <codeinline>undefined</codeinline>.</p>
    <p>La función <codeinline>printprops()</codeinline> es diferente: su trabajo es mostrar los nombres y valores de las propiedades de un objeto. No es necesario un valor de retorno, y la función no incluye una sentencia return. El valor de una invocación de la función <codeinline>printprops()</codeinline> es siempre <codeinline>undefined</codeinline>. Si una función no contiene una sentencia <codeinline>return</codeinline>, simplemente ejecuta cada sentencia en el cuerpo de la función hasta que llega al final, y devuelve el valor <codeinline>undefined</codeinline> a la persona que la invoca.</p>
    <p>Antes de ES6, las declaraciones de funciones sólo se permitían en el nivel superior dentro de un archivo Java-Script o dentro de otra función. Aunque algunas implementaciones se saltaban la norma, técnicamente no era legal definir funciones dentro del cuerpo de bucles, condicionales u otros bloques. Sin embargo, en el modo estricto de ES6, las declaraciones de funciones están permitidas dentro de los bloques. Una función definida dentro de un bloque sólo existe dentro de ese bloque, sin embargo, y no es visible fuera del bloque.</p>
  </section>
</Layoutjavascript>