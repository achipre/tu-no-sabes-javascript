---
import Navegation from "../../components/Navegation.astro";
import Layoutjavascript from "../../layouts/Layoutjavascript.astro";
---
<Layoutjavascript title="JavaScript: La guia definitiva">
  <Navegation capAnterior="capitulo-8" capSiguiente="capitulo-10" />
  <section class="fadeIn">
    <h1>Clases</h1>
    <p>Los objetos JavaScript se trataron en el <a href="capitulo-6">capítulo 6</a>. Ese capítulo trataba cada objeto como un conjunto único de propiedades, diferente de cualquier otro objeto. Sin embargo, a menudo es útil definir una <em>class</em> de objetos que comparten ciertas propiedades. Los miembros, o <em>instancias</em>, de la clase tienen sus propias propiedades para mantener o definir su estado, pero también tienen métodos que definen su comportamiento. Estos métodos son definidos por la clase y compartidos por todas las instancias. Imaginemos una clase llamada Complejo que representa y realiza operaciones aritméticas con números complejos, por ejemplo. Una instancia de Complex tendría propiedades para contener las partes real e imaginaria (el estado) del número complejo. Y la clase Complex definiría métodos para realizar la suma y la multiplicación (el comportamiento) de esos números.</p>
    <p>En JavaScript, las clases utilizan la herencia basada en prototipos: si dos objetos heredan propiedades (generalmente propiedades con valores de función o métodos) del mismo prototipo, decimos que esos objetos son instancias de la misma clase. Así es como funcionan las clases en JavaScript. Los prototipos y la herencia de JavaScript se trataron en <a href="capitulo-6#2-3">§6.2.3</a> y <a href="capitulo-6#3-2">§6.3.2</a> y necesitarás estar familiarizado con el material de esas secciones para entender este capítulo. Este capítulo cubre los prototipos en <a href="#1">§9.1</a>.</p>
    <p>Si dos objetos heredan del mismo prototipo, esto significa típicamente (pero no necesariamente) que fueron creados e inicializados por la misma función constructora o función fac- toria. Los constructores se han tratado en <a href="capitulo-4#6">§4.6</a>, <a href="capitulo-6#2-2">§6.2.2</a>, y <a href="capitulo-8#2-3">§8.2.3</a>, y este capítulo tiene más en <a href="#2">§9.2</a>.</p>
    <p>JavaScript siempre ha permitido la definición de clases. ES6 introdujo una nueva sintaxis (incluyendo una palabra clave <codeinline>class</codeinline>) que hace aún más fácil crear clases. Estas nuevas clases de JavaScript funcionan de la misma forma que las clases antiguas, y este capítulo comienza explicando la forma antigua de crear clases porque demuestra más claramente lo que sucede entre bastidores para que las clases funcionen. Una vez que hayamos explicados estos fundamentos, cambiaremos y empezaremos a utilizar la nueva sintaxis simplificada de definición de clases.</p>
    <p>Si está familiarizado con lenguajes de programación orientados a objetos fuertemente tipados como Java o C++, se dará cuenta de que las clases de JavaScript son bastante diferentes de las clases de esos lenguajes. Hay algunas similitudes sintácticas, y puede emular muchas características de las clases "clásicas" en JavaScript, pero es mejor entender de antemano que las clases de JavaScript y el mecanismo de herencia basado en prototipos son sustancialmente diferentes de las clases y el mecanismo de herencia basado en clases de Java y lenguajes similares.</p>
  </section>
</Layoutjavascript>