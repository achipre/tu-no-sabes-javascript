---
import Navegation from "../../components/Navegation.astro";
import Layoutjavascript from "../../layouts/Layoutjavascript.astro";
---
<Layoutjavascript title="JavaScript: La guia definitiva">
  <Navegation capAnterior="capitulo-11" capSiguiente="capitulo-13" />
  <section class="fadeIn">
    <h1>Iteradores y generadores</h1>
    <p>Los objetos iterables y sus iteradores asociados son una característica de ES6 que hemos visto varias veces a lo largo de este libro. Las matrices (incluyendo TypedArrays) son iterables, al igual que las cadenas y los objetos Set y Map. Esto significa que el contenido de estas estructuras de datos puede ser iterado -en bucle- con el bucle <codeinline>for/of</codeinline>, como vimos en <a href="capitulo-5#4-4">§5.4.4</a>:</p>
    <pre>
    <code class="language-js">let sum = 0;
    for(let i of [1,2,3]) &lbrace; // Loop once for each of these values
    sum += i;
    }
    sum // => 6</code></pre>
    <p>Los iteradores también pueden utilizarse con el operador <codeinline>...</codeinline> para expandir o "extender" un objeto iterable en un inicializador de array o en una invocación de función, como vimos en <a href="capitulo-7#1-2">§7.1.2</a>:</p>
    <pre>
    <code class="language-js">let chars = [..."abcd"]; // chars == ["a", "b", "c", "d"]
    let data = [1, 2, 3, 4, 5];
    Math.max(...data)        // => 5</code></pre>
    <p>Los iteradores pueden utilizarse con la asignación de desestructuración:</p>
    <pre>
    <code class="language-js">let purpleHaze = Uint8Array.of(255, 0, 255, 128);
    let [r, g, b, a] = purpleHaze; // a == 128</code></pre>
    <p>Cuando se itera un objeto Map, los valores devueltos son pares [clave, valor], que  funcionan bien con la asignación de desestructuración en un bucle for/of:</p>
    <pre>
    <code class="language-js">let m = new Map([["one", 1], ["two", 2]]);
    for(let [k,v] of m) console.log(k, v); // Logs 'one 1' and 'two 2'</code></pre>
    <p>Si desea iterar sólo las claves o sólo los valores en lugar de los pares, puede utilizar los métodos keys() y values():</p>
    <pre>
    <code class="language-js">[...m] // => [["one", 1], ["two", 2]]: default iteration
    [...m.entries()] // => [["one", 1], ["two", 2]]: entries() method is the same
    [...m.keys()] // => ["one", "two"]: keys() method iterates just map keys
    [...m.values()] // => [1, 2]: values() method iterates just map values</code></pre>
    <p>Por último, varias funciones integradas y constructores que se utilizan habitualmente con objetos Array están escritos (en ES6 y posteriores) para aceptar iteradores arbitrarios. El constructor Set() es uno de ellos:</p>
    <pre>
    <code class="language-js">// Strings are iterable, so the two sets are the same:
    new Set("abc") // => new Set(["a", "b", "c"])</code></pre>
    <p>Este capítulo explica cómo funcionan los iteradores y demuestra cómo crear tus propias estructuras de datos iterables. Después de explicar los iteradores básicos, este capítulo cubre los generadores, una nueva y potente característica de ES6 que se utiliza principalmente como una forma particularmente fácil de crear iteradores.</p>
  </section>
  <section id="1" class="py-4 xs:py-5 sm:py-6">
    <h2>12.1 Cómo funcionan los iteradores</h2>
    <p>El bucle for/of y el operador spread funcionan a la perfección con objetos iterables, pero merece la pena entender qué ocurre realmente para que la iteración funcione. Hay tres tipos distintos que necesitas entender para comprender la iteración en Java- Script. Primero, están los objetos iterables: estos son tipos como Array, Set y Map que pueden ser iterados. En segundo lugar, está el propio objeto iterador, que realiza la iteración. Y tercero, está el objeto resultado de la iteración que contiene el resultado de cada paso de la iteración.</p>
    <p>Un objeto iterable es cualquier objeto con un método iterador especial que devuelve un objeto iterador. Un iterador es cualquier objeto con un mé todo next() que devuelve un objeto resultado de iteración. Y un objeto resultado de iteración es un objeto con propiedades llamadas value y done. Para iterar un objeto iterable, primero se llama a su método iterator para obtener un objeto iterador. Luego, se llama al método next() del objeto iterador repetidamente hasta que el valor devuelto tenga su propiedad done establecida a true. Lo complicado de esto es que el método iterador de un objeto iterable no tiene un nombre convencional, sino que utiliza el símbolo Symbol.iterator como nombre. Así que un simple bucle for/of sobre un objeto iterable iterable también podría escribirse de la manera difícil, así:</p>
    <pre>
    <code class="language-js">let iterable = [99];
    let iterator = iterable[Symbol.iterator]();
    for(let result = iterator.next(); !result.done; result = iterator.next()) &lbrace;
      console.log(result.value) // result.value == 99
    }</code></pre>
    <p>El objeto iterador de los tipos de datos iterables incorporados es a su vez iterable. (Es decir, tiene un método llamado Symbol.iterator que sólo se devuelve a sí mismo.) Esto es ocasionalmente útil en código como el siguiente cuando se desea iterar a través de un iterador "parcialmente utilizado":</p>
    <pre>
    <code class="language-js">let list = [1,2,3,4,5];
    let iter = list[Symbol.iterator]();
    let head = iter.next().value; // head == 1
    let tail = [...iter]; // tail == [2,3,4,5]</code></pre>
  </section>
  <section id="2">
    <h2>12.2 Implementación de objetos iterables</h2>
    <p>Los objetos iterables son tan útiles en ES6 que deberías considerar hacer iterables tus propios tipos de datos siempre que representen algo que pueda ser iterado. Las clases Range mostradas en los Ejemplos 9-2 y 9-3 del Capítulo 9 eran iterables. Esas clases usaban funciones generadoras para hacerse iterables. Documentaremos los generadores más adelante en este capítulo, pero primero, implementaremos la clase Range una vez más, haciéndola iterable sin depender de un generador.</p>
    <p>Para que una clase sea iterable, debe implementar un método cuyo nombre sea el Símbolo Symbol.iterator. Ese método debe devolver un objeto iterador que tenga un método next(). Y el mé todo next() debe devolver un objeto resultado de iteración que tenga una propiedad value y/o una propiedad boolean done. El Ejemplo 12-1 implementa una clase iterable Range y demuestra cómo crear objetos iterable, iterador y resultado de iteración.</p>
    <p><em>Ejemplo 12-1. Una clase Range numérica iterable</em></p>
    <pre>
    <code class="language-js">/*
    * A Range object represents a range of numbers &lbrace;x: from &lt;= x &lt;= to}
    * Range defines a has() method for testing whether a given number is a member
    * of the range. Range is iterable and iterates all integers within the range.
    */
    class Range &lbrace;
      constructor (from, to) &lbrace;
        this.from = from;
        this.to = to;
      }

      // Make a Range act like a Set of numbers
      has(x) &lbrace; return typeof x === "number" && this.from &lt;= x && x &lt;= this.to; }

      // Return string representation of the range using set notation
      toString() &lbrace; return `&lbrace; x | $&lbrace;this.from} ≤ x ≤ $&lbrace;this.to} }`; }

      // Make a Range iterable by returning an iterator object.
      // Note that the name of this method is a special symbol, not a string.
      [Symbol.iterator]() &lbrace;
        // Each iterator instance must iterate the range independently of
        // others. So we need a state variable to track our location in the
        // iteration. We start at the first integer >= from.
        let next = Math.ceil(this.from); // This is the next value we return
        let last = this.to; // We won't return anything > this
        return &lbrace; // This is the iterator object
          // This next() method is what makes this an iterator object.
          // It must return an iterator result object.
          next() &lbrace;
            return (next &lt;= last) // If we haven't returned last value yet
              ? &lbrace; value: next++ } // return next value and increment it
              : &lbrace; done: true }; // otherwise indicate that we're done.
          },

          // As a convenience, we make the iterator itself iterable.
          [Symbol.iterator]() &lbrace; return this; }
        };
      }
    }

    for(let x of new Range(1,10)) console.log(x); // Logs numbers 1 to 10
    [...new Range(-2,2)] // => [-2, -1, 0, 1, 2]</code></pre>
    <p>Además de hacer tus clases iterables, puede ser muy útil definir funciones que devuelvan valores iterables. Considere estas alternativas basadas en iterables a los métodos map() y filter() de las matrices de JavaScript:</p>
    <pre>
    <code class="language-js">// Return an iterable object that iterates the result of applying f()
    // to each value from the source iterable
    function map(iterable, f) &lbrace;
      let iterator = iterable[Symbol.iterator]();
      return &lbrace; // This object is both iterator and iterable
        [Symbol.iterator]() &lbrace; return this; },
        next() &lbrace;
          let v = iterator.next();
          if (v.done) &lbrace;
            return v;
          } else &lbrace;
            return &lbrace; value: f(v.value) };
          }
        }
      };
    }

    // Map a range of integers to their squares and convert to an array
    [...map(new Range(1,4), x => x*x)] // => [1, 4, 9, 16]

    // Return an iterable object that filters the specified iterable,
    // iterating only those elements for which the predicate returns true
    function filter(iterable, predicate) &lbrace;
      let iterator = iterable[Symbol.iterator]();
      return &lbrace; // This object is both iterator and iterable
        [Symbol.iterator]() &lbrace; return this; },
        next() &lbrace;
          for(;;) &lbrace;
            let v = iterator.next();
            if (v.done || predicate(v.value)) &lbrace;
              return v;
            }
          }
        }
      };
    }

    // Filter a range so we're left with only even numbers
    [...filter(new Range(1,10), x => x % 2 === 0)] // => [2,4,6,8,10]</code></pre>
    <p>Una característica clave de los objetos iterables y los iteradores es que son intrínsecamente perezosos: cuando se requiere cálculo para calcular el siguiente valor, ese cálculo se puede aplazar hasta que el valor sea realmente necesario. Supongamos, por ejemplo, que tenemos una cadena de texto muy larga que queremos dividir en palabras separadas por espacios. Podría simplemente utilizar el método split() de su cadena, pero si hace esto, entonces toda la cadena tiene que ser procesada antes de que pueda utilizar incluso la primera palabra. Y acabas asignando mucha memoria al array devuelto y a todas las cadenas que contiene. Aquí hay una función que le permite iterar perezosamente las palabras de una cadena sin mantenerlas todas en memoria a la vez (en ES2020, esta función sería mucho más fácil de implementar usando el método matchAll() que devuelve el iterador descrito en §11.3.2):</p>
    <pre>
    <code class="language-js">function words(s) &lbrace;
      var r = /\s+|$/g; // Match one or more spaces or end
      r.lastIndex = s.match(/[^ ]/).index; // Start matching at first nonspace
      return &lbrace; // Return an iterable iterator object
        [Symbol.iterator]() &lbrace; // This makes us iterable
          return this;
        },
        next() &lbrace; // This makes us an iterator
          let start = r.lastIndex; // Resume where the last match ended
          if (start &lt; s.length) &lbrace; // If we're not done
            let match = r.exec(s); // Match the next word boundary
            if (match) &lbrace; // If we found one, return the word
              return &lbrace; value: s.substring(start, match.index) };
            }
          }
          return &lbrace; done: true }; // Otherwise, say that we're done
        }
      };
    }

    [...words(" abc def ghi! ")] // => ["abc", "def", "ghi!"]</code></pre>
  </section>
  <section id="2-1" class="py-4 xs:py-5 sm:py-6">
    <h2>12.2.1 "Cerrando" un Iterador: El método Return</h2>
    <p>Imagine una variante JavaScript (del lado del servidor) del iterador words() que, en lugar de tomar una cadena fuente como argumento, toma el nombre de un archivo, abre el archivo, lee líneas de él e itera las palabras de esas líneas. En la mayoría de los sistemas operativos, los programas que abren archivos para leer de ellos necesitan recordar cerrar esos archivos cuando terminan de leer, por lo que este iterador hipotético se aseguraría de cerrar el archivo después de que el método next() devuelva la última palabra en él.</p>
    <p>Pero los iteradores no siempre llegan hasta el final: un bucle for/of puede terminar con un break, un return o una excepción. Del mismo modo, cuando se utiliza un iterador con una asignación de desestructuración, el método next() sólo se llama las veces suficientes para obtener valores para cada una de las variables especificadas. El iterador puede tener muchos más valores que podría devolver, pero nunca serán solicitados.</p>
    <p>Si nuestro hipotético iterador palabras-en-un-archivo nunca recorre todo el camino hasta el final, todavía necesita cerrar el archivo que abrió. Por esta razón, los objetos iteradores pueden implementar un método return() para acompañar al método next(). Si la iteración se detiene antes de que next() haya devuelto un resultado de iteración con la propiedad done puesta a true (normalmente porque se ha salido de un bucle for/of antes de tiempo mediante una sentencia break), entonces el intérprete comprobará si el objeto iterador tiene un método return(). Si este método existe, el intérprete lo invocará sin argumentos, dándole al iterador la oportunidad de cerrar archivos, liberar memoria, y de alguna otra manera limpiar después de sí mismo. El método return() debe devolver un objeto resultado del iterador. Las propiedades del objeto se ignoran, pero es un error devolver un valor que no sea un objeto.</p>
    <p>El bucle for/of y el operador spread son características realmente útiles de JavaScript, por lo que cuando se crean APIs, es una buena idea utilizarlas siempre que sea posible. Pero tener que trabajar con un objeto iterable, su objeto iterador y los objetos resultado del iterador hace que el proceso sea algo complicado. Afortunadamente, los generadores pueden simplificar drásticamente la creación de iteradores personalizados, como veremos en el resto de este capítulo.</p>
  </section>
  <section id="3">
    <h2>12.3 Generadores</h2>
    <p>Un generador es un tipo de iterador definido con la nueva y potente sintaxis de ES6; es especialmente útil cuando los valores que se van a iterar no son los elementos de una estructura de datos, sino el resultado de un cálculo.</p>
    <p>Para crear un generador, primero debe definir una función generadora. Una función generadora es sintácticamente como una función JavaScript normal, pero se define con la palabra clave function* en lugar de function. (Técnicamente, no se trata de una palabra clave nueva, sino simplemente de un * después de la palabra clave function y antes del nombre de la función). Cuando se invoca una función generadora, ésta no ejecuta el cuerpo de la función, sino que devuelve un objeto generador. Este objeto generador es un iterador. Llamar a su método next() hace que el cuerpo de la función generadora se ejecute desde el principio (o cualquiera que sea su posición actual) hasta que llega a una sentencia yield. yield es nuevo en ES6 y es algo así como una sentencia return. El valor de la sentencia yield se convierte en el valor devuelto por la llamada next() en el iterador. Un ejemplo lo aclara:</p>
    <pre>
    <code class="language-js">// A generator function that yields the set of one digit (base-10) primes.
    function* oneDigitPrimes() &lbrace; // Invoking this function does not run the code
      yield 2; // but just returns a generator object. Calling
      yield 3; // the next() method of that generator runs
      yield 5; // the code until a yield statement provides
      yield 7; // the return value for the next() method.
    }
    
    // When we invoke the generator function, we get a generator
    let primes = oneDigitPrimes();
    
    // A generator is an iterator object that iterates the yielded values
    primes.next().value // => 2
    primes.next().value // => 3
    primes.next().value // => 5
    primes.next().value // => 7
    primes.next().done // => true
    
    // Generators have a Symbol.iterator method to make them iterable
    primes[Symbol.iterator]() // => primes

    // We can use generators like other iterable types
    [...oneDigitPrimes()] // => [2,3,5,7]
    let sum = 0;
    for(let prime of oneDigitPrimes()) sum += prime;
    sum // => 17</code></pre>
    <p>En este ejemplo, hemos utilizado una funció n* para definir un generador. Sin embargo, al igual que las funciones regulares, también podemos definir generadores en forma de expresión. Una vez más, basta con poner un asterisco después de la palabra clave function:</p>
    <pre>
    <code class="language-js">const seq = function*(from,to) &lbrace;
      for(let i = from; i &lt;= to; i++) yield i;
    };
    [...seq(3,5)] // => [3, 4, 5]</code></pre>
    <p>En las clases y los literales de objetos, podemos utilizar la notación abreviada para omitir por completo la palabra clave function cuando definimos métodos. Para definir un generador en este contexto, basta con poner un asterisco delante del nombre del método donde habría estado la palabra clave function, si la hubiéramos utilizado:</p>
    <pre>
    <code class="language-js">let o = &lbrace;
      x: 1, y: 2, z: 3,
      // A generator that yields each of the keys of this object
      *g() &lbrace;
        for(let key of Object.keys(this)) &lbrace;
          yield key;
        }
      }
    };
    [...o.g()] // => ["x", "y", "z", "g"]</code></pre>
    <p>Tenga en cuenta que no hay forma de escribir una función generadora utilizando la sintaxis de función de flecha.</p>
    <p>Los generadores a menudo facilitan la definición de clases iterables. Podemos reemplazar el método [Symbol.iterator]() mostrado en el Ejemplo 12-1 por una función generadora *[Sym bol.iterator&rbrack;() mucho más corta que tiene este aspecto:</p>
    <pre>
    <code class="language-js">*[Symbol.iterator]() &lbrace;
      for(let x = Math.ceil(this.from); x &lt;= this.to; x++) yield x;
    }</code></pre>
    <p>Véase el Ejemplo 9-3 en el Capítulo 9 para ver esta función iteradora basada en generador en contexto.</p>
  </section>
  <section id="3-1" class="py-4 xs:py-5 sm:py-6">
    <h2>12.3.1 Ejemplos de generadores</h2>
    <p>Los generadores son más interesantes si generan los valores que producen mediante algún tipo de cálculo. He aquí, por ejemplo, una función generadora que produce números de Fibonacci:</p>
    <pre>
    <code class="language-js">function* fibonacciSequence() &lbrace;
      let x = 0, y = 1;
      for(;;) &lbrace;
        yield y;
        [x, y] = [y, x+y]; // Note: destructuring assignment
      }
    }</code></pre>
    <p>Observe que la función generadora fibonacciSequence() tiene aquí un bucle infinito y cede valores para siempre sin retornar. Si este generador se utiliza con el operador de propagación ..., formará un bucle hasta que se agote la memoria y el programa se bloquee. Sin embargo, con cuidado, es posible usarlo en un bucle for/of:</p>
    <pre>
    <code class="language-js">// Return the nth Fibonacci number
    function fibonacci(n) &lbrace;
      for(let f of fibonacciSequence()) &lbrace;
        if (n-- &lt;= 0) return f;
      }
    }
    fibonacci(20) // => 10946</code></pre>
    <p>Este tipo de generador infinito resulta más útil con un generador take() como éste:</p>
    <pre>
    <code class="language-js">// Yield the first n elements of the specified iterable object
    function* take(n, iterable) &lbrace;
      let it = iterable[Symbol.iterator](); // Get iterator for iterable object
      while(n-- > 0) &lbrace; // Loop n times:
        let next = it.next(); // Get the next item from the iterator.
        if (next.done) return; // If there are no more values, return early
        else yield next.value; // otherwise, yield the value
      }
    }

    // An array of the first 5 Fibonacci numbers
    [...take(5, fibonacciSequence())] // => [1, 1, 2, 3, 5]</code></pre>
    <p>He aquí otra útil función generadora que intercala los elementos de múltiples objetos iterables:</p>
    <pre>
    <code class="language-js">// Given an array of iterables, yield their elements in interleaved order.
    function* zip(...iterables) &lbrace;
      // Get an iterator for each iterable
      let iterators = iterables.map(i => i[Symbol.iterator]());
      let index = 0;
      while(iterators.length > 0) &lbrace; // While there are still some iterators
        if (index >= iterators.length) &lbrace; // If we reached the last iterator
          index = 0; // go back to the first one.
        }
        let item = iterators[index].next(); // Get next item from next iterator.
        if (item.done) &lbrace; // If that iterator is done
          iterators.splice(index, 1); // then remove it from the array.
        }
        else &lbrace; // Otherwise,
          yield item.value; // yield the iterated value
          index++; // and move on to the next iterator.
        }
      }
    }

    // Interleave three iterable objects
    [...zip(oneDigitPrimes(),"ab",[0])] // => [2,"a",0,3,"b",5,7]</code></pre>
  </section>
  <section id="3-2">
    <h2>12.3.2 generadores yield* y recursivos</h2>
    <p>Además del generador <codeinline>zip()</codeinline> definido en el ejemplo anterior, puede ser útil tener una función generadora similar que proporcione los elementos de múltiples objetos iterables secuencialmente en lugar de intercalarlos. Podríamos escribir ese generador así:</p>
    <pre>
    <code class="language-js">function* sequence(...iterables) &lbrace;
      for(let iterable of iterables) &lbrace;
        for(let item of iterable) &lbrace;
          yield item;
        }
      }
    }

    [...sequence("abc",oneDigitPrimes())] // => ["a","b","c",2,3,5,7]</code></pre>
    <p>Este proceso de ceder los elementos de algún otro objeto iterable es tan común en las funciones generadoras que ES6 tiene una sintaxis especial para ello. La palabra clave yield* es como yield excepto que, en lugar de devolver un único valor, itera un objeto iterable y devuelve cada uno de los valores resultantes. La función generadora sequence() que hemos utilizado puede simplificarse con yield* de la siguiente manera:</p>
    <pre>
    <code class="language-js">function* sequence(...iterables) &lbrace;
      for(let iterable of iterables) &lbrace;
        yield* iterable;
      }
    }

    [...sequence("abc",oneDigitPrimes())] // => ["a","b","c",2,3,5,7]</code></pre>
    <p>El método array forEach() es a menudo una forma elegante de hacer un bucle sobre los elementos de un array, por lo que puedes tener la tentación de escribir la función sequence() así:</p>
    <pre>
    <code class="language-js">function* sequence(...iterables) &lbrace;
      iterables.forEach(iterable => yield* iterable ); // Error
    }</code></pre>
    <p>Sin embargo, esto no funciona. yield y yield* sólo pueden utilizarse dentro de funciones generadoras, pero la función de flecha anidada en este código es una función normal, no una función generadora de funciones*, por lo que yield no está permitido.</p>
    <p>yield* puede utilizarse con cualquier tipo de objeto iterable, incluidos los iterables implementados con generadores. Esto significa que yield* nos permite definir generadores recursivos, y podrías utilizar esta característica para permitir una simple iteración no recursiva sobre una estructura de árbol definida recursivamente, por ejemplo.</p>
  </section>
  <section id="4" class="py-4 xs:py-5 sm:py-6">
    <h2>12.4 Funciones avanzadas del generador</h2>
    <p>El uso más común de las funciones generadoras es crear iteradores, pero la característica fundamental de los generadores es que nos permiten pausar un cálculo, obtener resultados intermedios y reanudar el cálculo más tarde. Esto significa que los generadores tienen características que van más allá de las de los iteradores, y exploraremos esas características en las secciones siguientes.</p>
  </section>
  <section id="4-1">
    <h2>12.4.1 Valor de retorno de una función generadora</h2>
    <p>Las funciones generadoras que hemos visto hasta ahora no han tenido declaraciones de retorno, o si las han tenido, se han utilizado para provocar un retorno anticipado, no para devolver un valor. Sin embargo, como cualquier función, una función generadora puede devolver un valor. Para entender lo que ocurre en este caso, recuerda cómo funciona la iteración. El valor de retorno de la función next() es un objeto que tiene una propiedad value y/o una propiedad done. Con los iteradores y generadores típicos, si la propiedad value está definida, entonces la propiedad done está indefinida o es falsa. Y si done es true, entonces value es undefined. Pero en el caso de un generador que devuelve un valor, la llamada final a next devuelve un objeto que tiene definidas las propiedades value y done. La propiedad value contiene el valor devuelto por la función generadora, y la propiedad done es true, indicando que no hay más valores para iterar. Este valor final es ignorado por el bucle for/of y por el operador spread, pero está disponible para el código que itera manualmente con llamadas explícitas a next():</p>
    <pre>
    <code class="language-js">function *oneAndDone() &lbrace;
      yield 1;
      return "done";
    }

    // The return value does not appear in normal iteration.
    [...oneAndDone()] // => [1]
    // But it is available if you explicitly call next()
    let generator = oneAndDone();
    generator.next() // => &lbrace; value: 1, done: false}
    generator.next() // => &lbrace; value: "done", done: true }
    // If the generator is already done, the return value is not returned again
    generator.next() // => &lbrace; value: undefined, done: true }</code></pre>
  </section>
  <section id="4-2" class="py-4 xs:py-5 sm:py-6">
    <h2>12.4.2 El valor de una expresión de rendimiento</h2>
    <p>En la discusión anterior, hemos tratado yield como una sentencia que toma un valor pero no tiene valor propio. Sin embargo, yield es una expresión y puede tener un valor.</p>
    <p>Cuando se invoca el método next() de un generador, la función del generador se ejecuta hasta que alcanza una expresión yield. La expresión que sigue a la palabra clave yield se evalúa, y ese valor se convierte en el valor de retorno de la invocación a next(). En este punto, la función generadora deja de ejecutarse justo en medio de la evaluación de la expresión yield. La próxima vez que se llame al método next() del generador, el argumento pasado a next() se convertirá en el valor de la expresión yield que estaba en pausa. Así que el generador devuelve valores a su llamador con yield, y el llamador pasa valores al generador con next(). El generador y el invocador son dos flujos separados de ejecución que pasan valores (y control) de un lado a otro. El siguiente código lo ilustra:</p>
    <pre>
    <code class="language-js">function* smallNumbers() &lbrace;
      console.log("next() invoked the first time; argument discarded");
      let y1 = yield 1; // y1 == "b"
      console.log("next() invoked a second time with argument", y1);
      let y2 = yield 2; // y2 == "c"
      console.log("next() invoked a third time with argument", y2);
      let y3 = yield 3; // y3 == "d"
      console.log("next() invoked a fourth time with argument", y3);
      return 4;
    }

    let g = smallNumbers();
    console.log("generator created; no code runs yet");
    let n1 = g.next("a"); // n1.value == 1
    console.log("generator yielded", n1.value);
    let n2 = g.next("b"); // n2.value == 2
    console.log("generator yielded", n2.value);
    let n3 = g.next("c"); // n3.value == 3
    console.log("generator yielded", n3.value);
    let n4 = g.next("d"); // n4 == &lbrace; value: 4, done: true }
    console.log("generator returned", n4.value);</code></pre>
    <p>Cuando este código se ejecuta, produce la siguiente salida que demuestra el vaivén entre los dos bloques de código:</p>
    <pre>
    <code class="language-js">generator created; no code runs yet
    next() invoked the first time; argument discarded
    generator yielded 1
    next() invoked a second time with argument b
    generator yielded 2
    next() invoked a third time with argument c
    generator yielded 3
    next() invoked a fourth time with argument d
    generator returned 4</code></pre>
    <p>Observe la asimetría de este código. La primera invocación de next() inicia el generador, pero el valor pasado a esa invocación no es accesible al generador.</p>
  </section>
  <section id="4-3">
    <h2>12.4.3 Los métodos return() y throw() de un generador</h2>
    <p>Hemos visto que puedes recibir valores producidos o devueltos por una función generadora. Y puedes pasar valores a un generador en ejecución pasando esos valores cuando llamas al método next() del generador.</p>
    <p>Además de proporcionar entrada a un generador con next(), también puede alterar el flujo de control dentro del generador llamando a sus métodos return() y throw(). Como sus nombres sugieren, llamar a estos métodos en un generador hace que devuelva un valor o lance una excepción como si la siguiente sentencia en el generador fuera un return o throw.</p>
    <p>Recuerde que, si un iterador define un método return() y la iteración se detiene antes de tiempo, entonces el intérprete llama automáticamente al método return() para dar al iterador la oportunidad de cerrar archivos o hacer otro tipo de limpieza. En el caso de los generadores, no se puede definir un método return() personalizado para manejar la limpieza, pero se puede estructurar el código del generador para utilizar una sentencia try/finally que asegure que se realiza la limpieza necesaria (en el bloque finally) cuando el generador retorna. Al forzar el retorno del generador, el método return() incorporado en el generador asegura que el código de limpieza se ejecuta cuando el generador ya no se va a utilizar.</p>
    <p>Al igual que el método next() de un generador nos permite pasar valores arbitrarios a un generador en ejecución, el método throw() de un generador nos ofrece una forma de enviar señales arbitrarias (en forma de excepciones) a un generador. Llamar al método throw() siempre provoca una excepción dentro del generador. Pero si la función del generador está escrita con el código de gestión de excepciones adecuado, la excepción no tiene por qué ser fatal, sino que puede ser un medio para alterar el comportamiento del generador. Imaginemos, por ejemplo, un generador de contadores que produzca una secuencia creciente de números enteros. Podría escribirse de forma que una excepción enviada con throw() pusiera el contador a cero.</p>
    <p>Cuando un generador utiliza yield* para obtener valores de otro objeto iterable, una llamada al mé todo next() del generador provoca una llamada al método next() del objeto iterable. Lo mismo ocurre con los métodos return() y throw(). Si un generador utiliza yield* en un objeto iterable que tiene definidos estos métodos, la llamada a return() o throw() en el generador hace que el método return() o throw() del iterador sea llamado a su vez. Todos los iteradores deben tener un método next(). Los iteradores que necesitan limpiarse después de una iteración incompleta deben definir un método return(). Y cualquier iterador puede definir un método throw(), aunque no conozco ninguna razón práctica para hacerlo.</p>
  </section>
  <section id="4-4" class="py-4 xs:py-5 sm:py-6">
    <h2>12.4.4 Nota final sobre los generadores</h2>
    <p>Los generadores son una estructura de control generalizada muy potente. Nos dan la capacidad de pausar un cálculo con rendimiento y reiniciarlo de nuevo en algún momento posterior arbitrario con un valor de entrada arbitrario. Es posible utilizar generadores para crear una especie de sistema de hilos cooperativos dentro de un código JavaScript de un solo hilo. Y es posible utilizar generadores para enmascarar partes asíncronas de su programa para que su código parezca secuencial y síncrono, a pesar de que algunas de sus llamadas a funciones son en realidad asíncronas y dependen de eventos de la red.</p>
    <p>Intentar hacer estas cosas con generadores lleva a un código que es alucinantemente difícil de entender o explicar. Se ha hecho, sin embargo, y el único caso de uso realmente práctico ha sido para gestionar código asíncrono. JavaScript tiene ahora las palabras clave async y await (ver Capítulo 13) para este mismo propósito, sin embargo, y ya no hay ninguna razón para abusar de los generadores de esta manera.</p>
  </section>
  <section id="3-2">
    <h2>12.5 Resumen</h2>
    <p>En este capítulo has aprendido:</p>
    <ul>
      <li class="font-normal">El bucle for/of y el operador ... spread funcionan con objetos iterables.</li>
      <li class="font-normal">Un objeto es iterable si tiene un método con el nombre simbólico [Symbol.itera tor] que devuelve un objeto iterador.</li>
      <li class="font-normal">Un objeto iterador tiene un método next() que devuelve un objeto resultado de iteración.</li>
      <li class="font-normal">Un objeto resultado de iteración tiene una propiedad value que contiene el siguiente valor iterado, si existe. Si la iteración ha finalizado, entonces el objeto resultado debe tener una propiedad done establecida a true.</li>
      <li class="font-normal">Puedes implementar tus propios objetos iterables definiendo un método [Symbol.iterator] () que devuelva un objeto con un método next() que devuelva objetos resultado de la iteración. También puedes implementar funciones que acepten argumentos iteradores y devuelvan valores iteradores.</li>
      <li class="font-normal">Las funciones generadoras (funciones definidas con function* en lugar de function) son otra forma de definir iteradores.</li>
      <li class="font-normal">Cuando se invoca una función generadora, el cuerpo de la función no se ejecuta inmediatamente; en su lugar, el valor de retorno es un objeto iterable iterador. Cada vez que se ejecuta la función Cuando se llama al método next() del iterador, se ejecuta otra parte de la función generadora.</li>
      <li class="font-normal">Las funciones generadoras pueden utilizar el operador yield para especificar los valores devueltos por el iterador. Cada llamada a next() hace que la función generadora se ejecute hasta la siguiente expresión yield. El valor de esa expresión yield se convierte entonces en el valor devuelto por el iterador. Cuando no hay más expresiones yield, la función generadora regresa y la iteración se ha completado.</li>
    </ul>
  </section>
</Layoutjavascript>